story_id,epic,title,user_role,description,priority,story_points,dependencies,acceptance_criteria_1,acceptance_criteria_2,acceptance_criteria_3,technical_tasks,definition_of_done
US-001,"Project Foundation and Configuration","Configure Project Dependencies and Scripts","Developer","As a Developer, I want a `package.json` file with all dependencies and scripts defined, so that I can set up my local environment and run the application consistently.","Must Have",2,"","Given a fresh clone of the repository, When I run `npm install`, Then all required application and development dependencies are installed successfully.","Given the project dependencies are installed, When I run `npm run start:dev`, Then the development server starts without errors.","Given the project dependencies are installed, When I run `npm run build`, Then the TypeScript code is compiled into the `dist/` directory without errors.","Initialize the npm project and add all specified dependencies and dev dependencies. Define the `start:dev`, `build`, `start`, and `test` scripts as per SDS section 5.1.1.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-002,"Project Foundation and Configuration","Configure TypeScript Compiler Options","Developer","As a Developer, I want a `tsconfig.json` file with correct compiler options, so that the TypeScript code is transpiled consistently and with strict type-checking.","Must Have",1,"","Given the `tsconfig.json` is configured, When I run the TypeScript compiler (`tsc`), Then the project compiles successfully into the `./dist` directory.","Given a TypeScript file in the `src/` directory, When I run the build process, Then the corresponding JavaScript file is created in the `dist/` directory.","Given code that violates a `strict` rule, When I run the TypeScript compiler, Then a compiler error is thrown.","Create the TypeScript configuration file with the key options specified in SDS section 5.1.2, including `target`, `module`, `outDir`, `rootDir`, `strict`, and `esModuleInterop`.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-003,"Project Foundation and Configuration","Implement Centralized Environment Configuration","Developer","As a Developer, I want a centralized and type-safe configuration module, so that I can securely manage environment variables and prevent runtime errors from missing configuration.","Must Have",3,"US-001","Given a `.env` file with all required variables, When the application starts, Then the configuration object is loaded with the correct values.","Given a required environment variable (e.g., MONGODB_URI) is missing, When the application starts, Then it throws a descriptive error and exits gracefully.","Given the configuration module has been imported, When I attempt to modify a configuration property at runtime, Then a `TypeError` is thrown because the object is frozen.","Create `src/config/index.ts` to load variables from `.env` using `dotenv`, validate their presence, and export them in a frozen, type-safe object.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-004,"Project Foundation and Configuration","Document Required Environment Variables","Developer","As a new Developer, I want an `.env.example` file, so that I can quickly understand which environment variables are required to run the application.","Should Have",1,"","Given I have cloned the repository, When I look in the root directory, Then I find an `.env.example` file.","Given I open the `.env.example` file, When I inspect its contents, Then it lists the `PORT`, `MONGODB_URI`, and `JWT_SECRET` variables with placeholder values.","","Create a `.env.example` file in the root directory that lists all required environment variables with placeholder values, serving as documentation for developers.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-005,"Core Application and Server Setup","Bootstrap the Core Express Application","Developer","As a Developer, I want a modular `app.ts` that configures the core Express instance and middleware, so that I have a clean separation between the application setup and the server startup logic.","Must Have",2,"US-001","Given the `app.ts` file, When the application is initialized, Then an Express app instance is created and exported.","Given the Express app is initialized, When a request is received, Then `cors()` and `express.json()` middleware are applied before any routes are handled.","","Create `src/app.ts` to set up the Express app, apply global middleware like `cors()` and `express.json()`, and export the configured `app` instance for use in the server and tests.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-006,"Core Application and Server Setup","Implement a Global Error Handler","Developer","As a Developer, I want a global error handling middleware, so that all uncaught application errors are handled consistently and the server remains stable.","Must Have",3,"US-005","Given an error is passed to `next()` in any route handler, When the request is processed, Then the global error handler middleware catches the error.","Given the global error handler catches an error, When it sends a response, Then the response is a standardized JSON object with a `message` key and an appropriate HTTP status code.","Given an unhandled error occurs in a controller, When the request is processed, Then the server does not crash and returns a 500 Internal Server Error response.","In `src/app.ts`, add a global error-handling middleware function at the end of the middleware chain to catch errors and send a standardized JSON error response.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-007,"Core Application and Server Setup","Implement Server Startup and Database Connection","Developer","As a Developer, I want a server entrypoint that connects to the database before starting the web server, so that the application is fully ready to handle requests upon startup.","Must Have",3,"US-003,US-005","Given the application is started with a valid `MONGODB_URI`, When the `startServer` function is executed, Then a successful connection to the MongoDB database is established.","Given a successful database connection, When the server starts, Then it listens for requests on the port defined in the configuration and logs a success message.","Given the application is started with an invalid `MONGODB_URI`, When the `startServer` function is executed, Then an error is logged to the console and the process exits.","Create `src/server.ts` to import the `app` and `config`, connect to MongoDB using Mongoose, and start the Express server listening on the configured port.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-008,"Data Access Layer Implementation","Define the Procedural Level Data Model","Backend Developer","As a Backend Developer, I want a Mongoose schema and model for procedural levels, so that I can ensure all level data is stored in a structured and consistent way in MongoDB.","Must Have",3,"US-001","Given the ProceduralLevel model, When a new level document is created, Then it must contain all required fields like `playerId` and `generationSeed` with the correct data types.","Given a new document is saved using the model, When I inspect the document in the database, Then it automatically has `createdAt` and `updatedAt` timestamp fields managed by Mongoose.","","Create `src/data/models/procedural-level.model.ts` to define the `IProceduralLevel` interface and the `proceduralLevelSchema` with all fields and types from SDS 4.1, then export the compiled Mongoose model.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-009,"Data Access Layer Implementation","Define Database Indexes for a Procedural Level","Backend Developer","As a Backend Developer, I want database indexes defined on the ProceduralLevel schema, so that queries for levels by player or template are highly performant.","Should Have",1,"US-008","Given the application has started and connected to MongoDB, When I inspect the `procedurallevels` collection's indexes, Then an index on the `playerId` field exists.","Given the application has started and connected to MongoDB, When I inspect the `procedurallevels` collection's indexes, Then an index on the `baseLevelId` field exists.","","In `src/data/models/procedural-level.model.ts`, add schema-level definitions for indexes on `playerId` and `baseLevelId` to optimize query performance.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-010,"Data Access Layer Implementation","Implement the Procedural Level Repository","Backend Developer","As a Backend Developer, I want a repository that abstracts database operations for procedural levels, so that my business logic is decoupled from the Mongoose data source.","Must Have",3,"US-008","Given valid level data, When I call the repository's `create` method, Then a new document is persisted in the MongoDB collection and the created document is returned.","Given a document exists in the database with a specific ID, When I call the repository's `findById` method with that ID, Then the corresponding document is returned.","Given no document exists with a specific ID, When I call the repository's `findById` method with that ID, Then `null` is returned.","Create `src/data/repositories/procedural-level.repository.ts`. The class should be injectable with the Mongoose model and implement `create` and `findById` methods.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-011,"Application Services Implementation","Implement an Auditing Service","Backend Developer","As a Backend Developer, I want a simple, centralized `AuditService`, so that I can log important system events from anywhere in the application in a consistent format.","Should Have",1,"","Given I have an instance of the `AuditService`, When I call `logEvent` with an event type and details object, Then a structured JSON string containing a timestamp, the event type, and the details is logged to the console.","","","Create `src/services/audit.service.ts`. Implement the `logEvent` method to log a structured JSON message to the console for now, encapsulating the logging logic.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-012,"Application Services Implementation","Implement the Procedural Level Registration Service","Backend Developer","As a Backend Developer, I want a service that orchestrates the business logic for registering a new procedural level, so that data is saved and audited correctly as a single operation.","Must Have",3,"US-010,US-011,US-015","Given valid level data and a `playerId`, When the `registerLevel` service method is called, Then the repository's `create` method is called with the correctly combined data.","Given the repository successfully creates a new level document, When the `registerLevel` method is executing, Then the `auditService.logEvent` method is called with the event type 'LEVEL_INSTANCE_REGISTERED' and the relevant IDs.","Given the `registerLevel` method completes successfully, When it returns, Then the return value is the string representation of the new level's `_id`.","Create `src/services/procedural-level.service.ts`. Implement the `registerLevel` method to use the injected repository to save data and the injected audit service to log the event.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-013,"API Presentation Layer Implementation","Implement Secure Authentication Middleware","System Administrator","As a System Administrator, I want all sensitive API endpoints protected by JWT authentication, so that only authenticated clients can access them.","Must Have",5,"US-003","Given an API request with a valid 'Bearer <token>' in the Authorization header, When the `authenticate` middleware is executed, Then the request proceeds to the next handler and `req.user` contains the decoded token payload.","Given an API request with an invalid or expired token, When the `authenticate` middleware is executed, Then a 401 Unauthorized response is sent and the request does not proceed.","Given an API request with a missing Authorization header, When the `authenticate` middleware is executed, Then a 401 Unauthorized response is sent and the request does not proceed.","Create `src/middleware/auth.middleware.ts` to extract a Bearer token, verify it using `jsonwebtoken`, and attach the decoded payload to the request object or send a 401 error.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-014,"API Presentation Layer Implementation","Implement Reusable Request Validation Middleware","Backend Developer","As a Backend Developer, I want a generic middleware for request body validation, so that I can easily apply validation rules to any endpoint without duplicating code.","Should Have",3,"US-006","Given a request with a valid body and a Joi schema, When the validation middleware is applied, Then the request passes through to the next handler.","Given a request with an invalid body that fails schema validation, When the validation middleware is applied, Then it calls `next()` with a validation error.","Given the validation middleware passes an error to `next()`, When the request is processed, Then the global error handler sends a 400 Bad Request response with a descriptive message.","Create a generic validation middleware factory in `src/middleware/validation.middleware.ts` that accepts a Joi schema and returns a middleware to validate `req.body` against it.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-015,"API Presentation Layer Implementation","Define API Data Transfer Objects (DTOs)","Game Client Developer","As a Game Client Developer, I want clearly defined Data Transfer Objects (DTOs) for the API, so that I know the exact structure of request and response payloads.","Must Have",1,"","Given the project source code, When I inspect the `src/api/v1/procedural-levels/dto/` directory, Then I find `register-level.dto.ts` and `level-instance.response.dto.ts` files.","Given I open the DTO files, When I inspect their contents, Then they export TypeScript interfaces with field names and types that exactly match the Software Design Specification.","","Create `src/api/v1/procedural-levels/dto/register-level.dto.ts` and `level-instance.response.dto.ts` as TypeScript interfaces as defined in the SDS.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-016,"API Presentation Layer Implementation","Define API Request Validation Schema","Backend Developer","As a Backend Developer, I want a Joi validation schema for the level registration payload, so that I can ensure data integrity and reject invalid requests early.","Must Have",2,"US-001","Given a valid JSON object matching the `RegisterLevelDto`, When it is validated against the `registerLevelSchema`, Then the validation passes without errors.","Given a JSON object with a missing required field (e.g., `generationSeed`), When it is validated against the `registerLevelSchema`, Then the validation fails with a descriptive error message.","Given a JSON object with an incorrect data type (e.g., `complexityScore` as a string), When it is validated against the `registerLevelSchema`, Then the validation fails with a descriptive error message.","Create `src/api/v1/procedural-levels/procedural-levels.validation.ts` and export the `registerLevelSchema` using Joi, defining all required fields and their types.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-017,"API Presentation Layer Implementation","Implement the Procedural Level API Controller","Backend Developer","As a Backend Developer, I want a controller to handle HTTP logic for level registration, so that request/response handling is separated from the core business logic.","Must Have",3,"US-012,US-015","Given a valid request containing a `playerId` and level data, When the controller's `register` method is called, Then it invokes the `proceduralLevelService.registerLevel` method with the correct arguments.","Given the service method returns a new level ID successfully, When the controller's `register` method executes, Then it sends a `201 Created` HTTP response containing a JSON body with the new `proceduralLevelId`.","Given the service method throws an error, When the controller's `register` method executes, Then it catches the error and passes it to the `next()` function for global error handling.","Create `src/api/v1/procedural-levels/procedural-levels.controller.ts`. Implement the `register` method to extract data from the request, call the service layer, and send the appropriate HTTP response.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-018,"API Presentation Layer Implementation","Route API Requests for Procedural Level Registration","Game Client Developer","As a Game Client Developer, I want a defined `POST /api/v1/procedural-levels/register` endpoint, so that I can send procedurally generated level data to the backend for storage.","Must Have",3,"US-013,US-014,US-016,US-017","Given I send a `POST` request to `/api/v1/procedural-levels/register` with a valid JWT and a valid request body, When the request is processed, Then it is successfully handled by the `proceduralLevelsController.register` method.","Given I send a `POST` request to `/api/v1/procedural-levels/register` without a valid JWT, When the request is processed, Then the authentication middleware rejects it with a 401 status before it reaches the controller.","Given I send a `POST` request to `/api/v1/procedural-levels/register` with a valid JWT but an invalid request body, When the request is processed, Then the validation middleware rejects it with a 400 status before it reaches the controller.","Create `src/api/v1/procedural-levels/index.ts`. Create an `Express.Router`, define the `POST /register` route, and apply the `authenticate` and `validate` middleware before wiring it to the controller's `register` method.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-019,"Quality Assurance and Testing","Create Unit Tests for Application Services","Developer/QA Engineer","As a Developer/QA Engineer, I want unit tests for the application services, so that I can verify the business logic works correctly in isolation from the database and other services.","Should Have",5,"US-012","Given the `ProceduralLevelService` is being tested, When its dependencies (repository, audit service) are mocked, Then I can verify that `registerLevel` calls the mocked `create` and `logEvent` methods with the expected arguments.","Given the `AuditService` is being tested, When `logEvent` is called, Then I can assert that `console.log` was called with the correctly formatted JSON string.","Given I run the test suite, When the service unit tests complete, Then code coverage for the services is above 80%.","Create unit tests for `ProceduralLevelService` and `AuditService`. Use Jest to mock dependencies and verify that methods are called correctly and business logic is sound.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-020,"Quality Assurance and Testing","Set Up the Integration Test Environment","Developer/QA Engineer","As a Developer/QA Engineer, I want a fully configured integration test environment, so that I can run tests against a real server instance and an isolated in-memory database.","Should Have",8,"US-005,US-007","Given the Jest test suite is about to run, When the `beforeAll` hook executes, Then an in-memory MongoDB server is started and the application connects to it.","Given the Jest test suite has finished running, When the `afterAll` hook executes, Then the database connection is closed and the in-memory server is stopped.","Given the test setup is complete, When a test file runs, Then it can make HTTP requests to the `app` instance using a library like Supertest.","Configure Jest to work with `mongodb-memory-server`. Set up global `beforeAll` and `afterAll` hooks to manage the database connection and server lifecycle for tests.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-021,"Quality Assurance and Testing","Create Integration Test for the Level Registration Endpoint","Developer/QA Engineer","As a Developer/QA Engineer, I want a full integration test for the level registration endpoint, so that I can confirm the entire request-response cycle, including all middleware and database interactions, works as expected.","Must Have",8,"US-018,US-020","Given a valid JWT and a valid request body, When I send a `POST` request to `/api/v1/procedural-levels/register`, Then I receive a 201 Created status, the response body contains the new level's ID, and the data is correctly saved in the test database.","Given a valid JWT and an invalid request body (e.g., missing field), When I send a `POST` request to `/api/v1/procedural-levels/register`, Then I receive a 400 Bad Request status and a descriptive error message.","Given a missing or invalid JWT, When I send a `POST` request to `/api/v1/procedural-levels/register`, Then I receive a 401 Unauthorized status.","Using Supertest, write integration tests for the `POST /register` endpoint covering the happy path (201), validation failure (400), and authentication failure (401).","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-022,"Deployment and Operations","Containerize the Application for Production","DevOps Engineer","As a DevOps Engineer, I want a multi-stage Dockerfile for the application, so that I can build a small, secure, and portable container image for production deployment.","Should Have",5,"US-001,US-002","Given the `Dockerfile` in the repository, When I run `docker build`, Then a Docker image is created successfully without errors.","Given the built Docker image, When I run a container from it, Then the application starts, connects to its database, and is ready to serve requests.","Given I inspect the final production image, When I check its contents, Then it does not contain the `src/` directory or any development dependencies.","Create a multi-stage `Dockerfile`. The build stage installs all dependencies and compiles the TypeScript. The final stage copies only the `dist` folder, `package.json`, and production `node_modules` into a slim base image.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."
US-023,"Deployment and Operations","Create a Docker Compose Setup for Local Development","Developer","As a Developer, I want a `docker-compose.yml` file, so that I can spin up the entire local development environment, including the database, with a single command.","Could Have",5,"US-022","Given the `docker-compose.yml` file, When I run `docker-compose up`, Then both the application container and a MongoDB container are started and networked together.","Given the Docker Compose environment is running, When I make a code change in my local `src/` directory, Then the application inside the container automatically restarts to reflect the change.","Given the Docker Compose environment is running, When the application starts, Then it can successfully connect to the MongoDB container.","Create a `docker-compose.yml` file to define the `app` and `mongo` services. The `app` service should mount the local source code as a volume to enable live-reloading.","Code is peer-reviewed, merged to main, passes all CI checks, and meets all acceptance criteria."