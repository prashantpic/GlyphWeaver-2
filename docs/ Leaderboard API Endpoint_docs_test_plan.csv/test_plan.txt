test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TEST-SMOKE-SETUP-001,Core Project Setup,"Smoke",System Testing,Critical,High,"Verify that the server can start successfully after all setup tasks are complete.","All dependencies are installed, and the `dist` directory is compiled.",1. Run `npm run start`. 2. Observe the console output.,The server starts without crashing and logs a message indicating it's listening on the configured port.,N/A,"Node.js, npm",0.5,"WI-101-1, WI-102-1, WI-103-1, WI-103-2"
TEST-UNIT-REPO-001,Data Access Layer (ScoreRepository),"Functional",Unit Testing,Critical,High,"Verify `ScoreRepository.create` calls the Mongoose model's `create` method with the correct data.","The `PlayerScoreModel` is mocked using `jest.mock()`.",1. Instantiate `ScoreRepository` with the mocked model. 2. Call `repository.create()` with a score data object. 3. Assert that the mocked model's `create` method was called exactly once with the provided data.,The mocked `PlayerScoreModel.create` is called with the correct arguments.,Sample `IPlayerScore` object.,Jest,0.5,WI-203-1
TEST-UNIT-REPO-002,Data Access Layer (ScoreRepository),"Functional",Unit Testing,Critical,High,"Verify `ScoreRepository.findByLeaderboard` correctly applies pagination (`skip`, `limit`) and a dynamic sort order based on input.","The `PlayerScoreModel` and its chainable query methods (`find`, `sort`, `skip`, `limit`) are mocked.",1. Instantiate `ScoreRepository`. 2. Define a complex `tieBreakingFields` array (e.g., `[{ field: 'metadata.completionTime', order: 1 }]`). 3. Call `repository.findByLeaderboard()` with `limit: 20`, `offset: 40`, and the tie-breaking fields. 4. Assert that `skip(40)` and `limit(20)` were called. 5. Assert that `sort()` was called with a correctly constructed sort object (e.g., `{ scoreValue: -1, 'metadata.completionTime': 1, timestamp: 1 }`).,The mocked Mongoose query methods are called with the exact parameters corresponding to the input options, especially the dynamically generated sort object.,Sample `tieBreakingFields` array.,Jest,1.5,WI-203-2
TEST-UNIT-REPO-003,Data Access Layer (ScoreRepository),"Functional",Unit Testing,Critical,High,"Verify `ScoreRepository.getPlayerRank` accurately calculates rank for a user with no ties.","The `PlayerScoreModel` and its methods (`findOne`, `countDocuments`) are mocked.",1. Mock `findOne` to return a specific user's score (e.g., `scoreValue: 1000`). 2. Mock `countDocuments` to return a number (e.g., `5`). 3. Call `repository.getPlayerRank()` for that user. 4. Assert that `countDocuments` was called with the correct query (`{ leaderboardId, scoreValue: { $gt: 1000 } }`).,The method should return the result of `countDocuments` + 1 (e.g., `5 + 1 = 6`).,A mocked player score object.,Jest,2,WI-203-3
TEST-UNIT-REPO-004,Data Access Layer (ScoreRepository),"Functional",Unit Testing,Critical,High,"Verify `ScoreRepository.getPlayerRank` accurately calculates rank for a user involved in a tie, using tie-breaking fields.","The `PlayerScoreModel` and its methods (`findOne`, `countDocuments`) are mocked.",1. Mock `findOne` to return a user's score (e.g., `scoreValue: 1000`, `completionTime: 50`). 2. Mock `countDocuments` twice (for scores greater than, and for ties). 3. Call `repository.getPlayerRank()` for that user on a leaderboard with tie-breaking rules. 4. Assert `countDocuments` is called with a complex query including the tie-breaking logic (e.g., using `$or` for `scoreValue > 1000` or `scoreValue: 1000 AND completionTime < 50`).,The method returns the correct rank, accurately reflecting the tie-breaking logic.,Mocked player score with metadata for tie-breaking.,Jest,3,WI-203-3
TEST-INT-DB-001,Data Access Layer (PlayerScore),"Non-Functional (Performance)",Integration Testing,Critical,High,"Verify that queries to fetch a leaderboard from the database use the defined compound index to ensure performance. (Addresses RISK-001)","An integration test environment with a real MongoDB instance is running. The `playerScores` collection is populated with sample data.",1. In an integration test for the `findByLeaderboard` method, execute the query against the test database. 2. Call `.explain('executionStats')` on the Mongoose query. 3. Assert that the `winningPlan.stage` is 'IXSCAN' (Index Scan). 4. Assert that the `winningPlan.inputStage.indexName` matches the name of the intended compound index. 5. Assert that `totalDocsExamined` is low and close to `nReturned`.,The query plan confirms that the correct compound index was used, preventing a full collection scan (COLLSCAN).,A large set of dummy player scores (e.g., 10,000+) to make the performance difference measurable.,Jest,Mongoose,Docker,"2.5",WI-201-2
TEST-UNIT-REPO-005,Data Access Layer (PlayerRepository),"Functional",Unit Testing,Critical,High,"Verify `PlayerRepository.findManyByIds` returns a Map of player data for efficient lookups.","The `PlayerProfileModel` is mocked.",1. Mock the `find` method to return an array of player profile documents. 2. Instantiate `PlayerRepository` and call `findManyByIds` with an array of user IDs. 3. Assert that the method returns a `Map` object. 4. Assert that the Map contains the correct keys (user IDs) and values (player data).,The method returns a `Map` where keys are user IDs and values are the corresponding player profile objects.,An array of mock user IDs and a corresponding array of mock player profile documents.,Jest,1,WI-204-2
TEST-UNIT-REPO-006,Data Access Layer (PlayerRepository),"Functional",Unit Testing,Critical,High,"Verify `PlayerRepository.setLeaderboardExclusion` calls `updateOne` with the correct parameters.","The `PlayerProfileModel` is mocked.",1. Mock the `updateOne` method. 2. Instantiate `PlayerRepository` and call `setLeaderboardExclusion` with a `userId` and `isExcluded=true`. 3. Assert that `updateOne` was called with the filter `{ _id: userId }` and the update object `{ $set: { isExcludedFromLeaderboards: true } }`.,The mocked `updateOne` method is called with the correct filter and update documents.,A sample `userId` string.,Jest,0.5,WI-204-2
TEST-UNIT-SERVICE-001,Application Logic Layer (CheatDetectionService),"Functional",Unit Testing,Critical,High,"Verify `isScoreValid` returns `false` for a submission with an incorrect `validationHash`. (Addresses RISK-003)","The `CheatDetectionService` is instantiated. `process.env.SCORE_SECRET` is set.",1. Create a `submission` DTO. 2. Call `service.isScoreValid()` with the submission, providing an intentionally incorrect `validationHash`. 3. Assert that the method returns `false`.,The method must return `false`.,A valid `SubmitScoreDto` object where the hash can be manipulated.,Jest,Node.js Crypto,1,WI-303-1
TEST-UNIT-SERVICE-002,Application Logic Layer (CheatDetectionService),"Functional",Unit Testing,Critical,High,"Verify `isScoreValid` returns `false` for a score higher than the level's `maxPossibleScore`.","`CheatDetectionService` is instantiated with a mocked `ILevelRepository`.",1. Mock the `ILevelRepository.findById()` to return a level object with `maxPossibleScore: 5000`. 2. Create a submission DTO with `score: 5001`. 3. Call `service.isScoreValid()` with the submission and a leaderboard object referencing the mocked level. 4. Assert that the method returns `false`.,The method must return `false` when the submitted score exceeds the configured maximum.,A mock `ILevelRepository` and a `SubmitScoreDto` with an excessive score.,Jest,1,WI-303-2
TEST-UNIT-SERVICE-003,Application Logic Layer (CheatDetectionService),"Functional",Unit Testing,Critical,High,"Verify `isScoreValid` returns `true` for a completely valid score submission.","`CheatDetectionService` is instantiated with a mocked `ILevelRepository`. `process.env.SCORE_SECRET` is set.",1. Create a valid submission DTO. 2. Manually calculate the correct `validationHash` using the same logic as the service. 3. Set the correct hash on the DTO. 4. Mock the `ILevelRepository` to return a level with a high `maxPossibleScore`. 5. Call `service.isScoreValid()`.,The method must return `true`.,A valid `SubmitScoreDto` and a correctly generated server-side hash.,Jest,Node.js Crypto,1,WI-303-2
TEST-UNIT-SERVICE-004,Application Logic Layer (LeaderboardService),"Functional",Unit Testing,Critical,High,"Verify `getLeaderboardView` fetches from repositories and sets cache on a cache miss.","`LeaderboardService` is instantiated with all dependencies mocked (`ICacheProvider`, `IScoreRepository`, etc.).",1. Mock `cacheProvider.get` to return `null`. 2. Mock repository methods to return valid data (leaderboard def, scores, players). 3. Call `service.getLeaderboardView()`. 4. Assert that `scoreRepository.findByLeaderboard` and `playerRepository.findManyByIds` were called. 5. Assert that `cacheProvider.set` was called with the correct key and the constructed DTO.,Repository methods are called to fetch data, and the result is passed to `cacheProvider.set` before being returned.,Mocked dependencies for all repositories and providers.,Jest,2,WI-305-2
TEST-UNIT-SERVICE-005,Application Logic Layer (LeaderboardService),"Functional",Unit Testing,Critical,High,"Verify `getLeaderboardView` returns data from cache and does not hit repositories on a cache hit.","`LeaderboardService` is instantiated with all dependencies mocked.",1. Create a mock `LeaderboardViewDto` and mock `cacheProvider.get` to return its stringified version. 2. Call `service.getLeaderboardView()`. 3. Assert that `scoreRepository.findByLeaderboard` was NOT called. 4. Assert that the returned value matches the parsed DTO from the cache.,The service returns the parsed cached data, and no repository methods are called.,A mock DTO to be returned from the mocked cache.,Jest,1.5,WI-305-2
TEST-UNIT-SERVICE-006,Application Logic Layer (LeaderboardService),"Functional",Unit Testing,Critical,High,"Verify `processScoreSubmission` saves score and invalidates cache for a valid submission. (Addresses RISK-004)","`LeaderboardService` is instantiated with all dependencies mocked.",1. Mock `cheatDetectionService.isScoreValid` to return `true`. 2. Mock `scoreRepository.create` and `cacheProvider.invalidateByPattern`. 3. Call `service.processScoreSubmission()`. 4. Assert `scoreRepository.create` was called. 5. Assert `auditService.logScoreSubmission` was called. 6. Assert `cacheProvider.invalidateByPattern` was called with the correct pattern.,The score is created in the repository, the audit service is called, and the cache invalidation method is invoked.,Mocked dependencies for all services, repositories, and providers.,Jest,2,WI-305-3
TEST-UNIT-SERVICE-007,Application Logic Layer (LeaderboardService),"Functional",Unit Testing,Critical,High,"Verify `processScoreSubmission` throws an exception and logs suspicious activity for an invalid submission.","`LeaderboardService` is instantiated with all dependencies mocked.",1. Mock `cheatDetectionService.isScoreValid` to return `false`. 2. Call `service.processScoreSubmission()`. 3. Assert that the method throws a `ForbiddenException`. 4. Assert that `scoreRepository.create` was NOT called. 5. Assert that `auditService.logSuspiciousActivity` was called.,A `ForbiddenException` is thrown, and the suspicious activity is logged, but no score is saved.,Mocked dependencies, especially `cheatDetectionService`.,Jest,1.5,WI-305-3
TEST-UNIT-CACHE-001,Infrastructure (CacheProvider),"Functional",Unit Testing,Should Have,High,"Verify `CacheProvider` implementation using Redis Sets for invalidation does NOT use the `KEYS` command. (Addresses RISK-005)","`CacheProvider` is instantiated, and the `ioredis` client is mocked.",1. Call `cacheProvider.invalidateByPattern('some_pattern')`. 2. Assert that the mocked `smembers` and `del` methods were called. 3. Assert that the mocked `keys` method was NEVER called.,The implementation uses `SADD` on set, and `SMEMBERS` + `DEL` on invalidate, completely avoiding the `KEYS` command.,A mocked `ioredis` client instance.,Jest,1.5,WI-501-2
TEST-INT-AUTH-001,Infrastructure (Auth Middleware),"Security",Integration Testing,Critical,High,"Verify `jwtAuth` middleware rejects requests with no token.","A mock Express app is running with an endpoint protected by `jwtAuth` middleware.",1. Use `supertest` to make a GET request to the protected endpoint without an `Authorization` header. 2. Assert that the response status code is 401 (Unauthorized).,The server responds with a 401 status code.,N/A,supertest, Jest, jsonwebtoken,1,WI-502-3
TEST-INT-AUTH-002,Infrastructure (Auth Middleware),"Security",Integration Testing,Critical,High,"Verify `jwtAuth` middleware rejects requests with an invalid or expired token.","A mock Express app is running with an endpoint protected by `jwtAuth` middleware. `process.env.JWT_SECRET` is set.",1. Use `supertest` to make a GET request to the protected endpoint with an `Authorization: Bearer <INVALID_TOKEN>` header. 2. Assert that the response status code is 401 (Unauthorized).,The server responds with a 401 status code.,An invalid/expired JWT string.,supertest, Jest, jsonwebtoken,1,WI-502-3
TEST-INT-AUTH-003,Infrastructure (Auth Middleware),"Security",Integration Testing,Critical,High,"Verify `jwtAuth` middleware allows requests with a valid token and attaches user payload.","A mock Express app is running with an endpoint protected by `jwtAuth` that returns `req.user`.",1. Generate a valid JWT with a known payload (e.g., `{ userId: '123', role: 'user' }`). 2. Use `supertest` to make a GET request with the valid token. 3. Assert that the response status code is 200. 4. Assert that the response body matches the JWT payload.,The server responds with 200 OK and the response body is the decoded user payload from the token.,A valid JWT for a standard user.,supertest, Jest, jsonwebtoken,1.5,WI-502-3
TEST-INT-AUTH-004,Infrastructure (Auth Middleware),"Security",Integration Testing,Critical,High,"Verify `adminOnly` middleware rejects requests from non-admin users.","A mock Express app is running with an endpoint protected by `jwtAuth` and `adminOnly`.",1. Generate a valid JWT for a regular user (`role: 'user'`). 2. Use `supertest` to make a GET request to the admin-only endpoint with the user's token. 3. Assert that the response status code is 403 (Forbidden).,The server responds with a 403 status code.,A valid JWT for a non-admin user.,supertest, Jest, jsonwebtoken,1,WI-502-3
TEST-INT-AUTH-005,Infrastructure (Auth Middleware),"Security",Integration Testing,Critical,High,"Verify `adminOnly` middleware allows requests from admin users.","A mock Express app is running with an endpoint protected by `jwtAuth` and `adminOnly`.",1. Generate a valid JWT for an admin user (`role: 'admin'`). 2. Use `supertest` to make a GET request to the admin-only endpoint with the admin's token. 3. Assert that the response status code is 200 (or other success code).,The server responds with a success status code (e.g., 200, 204).,A valid JWT for an admin user.,supertest, Jest, jsonwebtoken,1,WI-502-3
TEST-SYS-API-001,API End-to-End,"Functional",System Testing,Critical,High,"Verify the full score submission and retrieval flow.","A test instance of the API, MongoDB, and Redis is running. Test setup has created a leaderboard definition.",1. Generate a valid user token. 2. POST a valid score to `/api/v1/leaderboards/test-board/scores`. Assert 201 response. 3. POST another, higher score from a different user. Assert 201. 4. GET `/api/v1/leaderboards/test-board`. 5. Assert 200 response and that the body contains both scores, with the higher score ranked first.,The API correctly persists scores and returns them in the correct ranked order.,A test leaderboard key, JWTs for multiple test users, valid score submission bodies.,supertest, Jest, Docker,"3.5",WI-603-3
TEST-SYS-API-002,API End-to-End,"Functional",System Testing,Critical,High,"Verify that submitting an invalid score body is rejected by the Joi validation middleware.","The API is running.",1. Generate a valid user token. 2. POST a score to `/api/v1/leaderboards/test-board/scores` with a malformed body (e.g., `score` is a string, or `validationHash` is missing). 3. Assert that the response status code is 400 (Bad Request).,The API responds with a 400 status code and a descriptive error message from the validator.,A JWT for a test user, a malformed score submission body.,supertest, Jest, Docker,1,WI-401-1
TEST-SYS-API-003,API End-to-End,"Functional",System Testing,Critical,High,"Verify that leaderboard retrieval respects pagination parameters.","The API is running. A leaderboard has been seeded with at least 10 scores.",1. Generate a valid user token. 2. GET `/api/v1/leaderboards/test-board?limit=5&offset=0`. Assert the response contains 5 entries. 3. GET `/api/v1/leaderboards/test-board?limit=5&offset=5`. Assert the response contains 5 different entries. 4. Compare the entries from both calls to ensure they are unique and represent the correct pages.,The API returns the correct slice of the leaderboard based on the `limit` and `offset` query parameters.,A JWT for a test user, a leaderboard with >10 scores.,supertest, Jest, Docker,2,WI-402-1
TEST-SYS-API-004,API End-to-End,"Non-Functional (Performance)",System Testing,Should Have,High,"Verify that the caching layer is working for leaderboard retrieval.","The API is running with caching enabled.",1. Generate a valid user token. 2. Flush the cache via a test helper or specific endpoint. 3. GET `/api/v1/leaderboards/test-board`. Record the response time. 4. Immediately GET the same endpoint again. 5. Assert that the second response is significantly faster than the first. 6. (Optional) Check response headers for a custom `X-Cache: HIT` header.,The second API call is measurably faster, indicating the response was served from the cache.,A JWT for a test user.,supertest, Jest, Docker,2,WI-305-2
TEST-PERF-API-001,API Performance,"Non-Functional (Load)",Performance Testing,Should Have,Medium,"Benchmark the `GET /:leaderboardKey` endpoint under load.","The API is deployed to a staging environment that mirrors production specs. A leaderboard with 1M+ scores exists.",1. Use a load testing tool (k6, JMeter) to simulate 200 concurrent users requesting the leaderboard endpoint for 5 minutes. 2. Monitor the P95 response time and error rate.,The P95 latency must remain below 300ms, and the error rate must be less than 0.1%.,A database seeded with millions of scores.,k6 / JMeter,8,"US-402"
TEST-PERF-API-002,API Performance,"Non-Functional (Load)",Performance Testing,Should Have,Medium,"Benchmark the `POST /:leaderboardKey/scores` endpoint under load.","The API is deployed to a staging environment that mirrors production specs.",1. Use a load testing tool to simulate 50 concurrent users submitting unique scores for 5 minutes. 2. Monitor the P99 response time and error rate. 3. After the test, verify that cache invalidation has worked by fetching the leaderboard.,The P99 latency for score submission must remain below 500ms, with an error rate < 0.1%.,A script to generate unique, valid score submission bodies.,k6 / JMeter,8,"US-401"
TEST-INFRA-DOCKER-001,Deployment and Operations,"Smoke",System Testing,Should Have,High,"Verify the production Docker image is minimal and functional.","The `Dockerfile` has been created.",1. Run `docker build .` to build the image. 2. Run `docker images` and verify the image size is reasonably small (e.g., < 250MB). 3. Run a container from the image: `docker run -p 3000:3000 <image_name>`. 4. Make a request to a health-check endpoint on `localhost:3000`. 5. Run `docker exec <container_id> ls` and verify that `node_modules` does not contain dev dependencies and source `.ts` files are not present.,The Docker image builds, runs, serves requests, and has a minimal footprint, containing only production artifacts.,N/A,Docker,1.5,WI-701-1