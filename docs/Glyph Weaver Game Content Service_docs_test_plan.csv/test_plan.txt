test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
SYST-CONF-001,Project Setup,Smoke,System,Highest,No,"Verify that `npm install` successfully installs all dependencies from package.json","Project is cloned. Node.js and npm are installed.","1. Navigate to the project root directory. 2. Run `npm install`.","The command completes without errors, and the `node_modules` directory is created and populated.",N/A,npm,0.25,TASK-1011-02
SYST-CONF-002,Project Setup,Functional,System,High,No,"Verify that the `npm run dev` script starts the server with nodemon","All dependencies are installed. A `.env` file with a valid `MONGO_URI` is present.","1. Run `npm run dev`. 2. Observe the console output. 3. Make a minor change to a `.ts` file in `src/`.","The server starts and logs a connection message. Nodemon detects the file change and restarts the server automatically.",Valid `.env` file,nodemon,0.25,TASK-1011-01
SYST-CONF-003,Project Setup,Functional,System,High,Yes,"Verify that the `npm run build` script transpiles TypeScript to JavaScript","All dependencies are installed.","1. Run `npm run build`.","The command completes without errors, and a `dist` directory containing the compiled JavaScript files is created.",N/A,TypeScript (tsc),0.25,"TASK-1012-01,TASK-1011-01"
UT-CONF-001,Project Setup,Functional,Unit,High,Yes,"Verify TypeScript strict mode rejects invalid code","The `tsconfig.json` file is configured with `strict: true`.","1. Introduce a deliberate type error in a test file (e.g., `const x: string = 123;`). 2. Run `npm run build`.","The TypeScript compiler (`tsc`) should fail with a type error message.",Invalid TypeScript code snippet,TypeScript (tsc),0.25,TASK-1012-01
UT-MOD-001,Domain: Zone Model,Functional,Unit,Highest,Yes,"Verify Zone model enforces required fields","Test environment with in-memory DB is set up.","1. Attempt to save a Zone document without the required 'name' field. 2. Attempt to save a Zone document without the required 'unlockCondition' field.","Mongoose should throw a `ValidationError` in both cases.",N/A,"Jest, Mongoose, mongodb-memory-server",0.5,TASK-2011-01
UT-MOD-002,Domain: Zone Model,Functional,Unit,Highest,Yes,"Verify Zone model enforces unique name constraint","Test environment with in-memory DB is set up.","1. Save a Zone with `name: 'The First Zone'`. 2. Attempt to save a second Zone with `name: 'The First Zone'`.","The second save attempt should fail and throw a duplicate key error (code 11000).","Zone data with duplicate names,"Jest, Mongoose, mongodb-memory-server",0.5,TASK-2011-01
UT-MOD-003,Domain: Level Model,Functional,Unit,Highest,Yes,"Verify Level model enforces compound unique index on {zoneId, levelNumber}","Test environment with in-memory DB is set up. A valid Zone is created.","1. Create and save a Zone document, get its ID. 2. Save a Level with `zoneId: <ID>`, `levelNumber: 1`. 3. Attempt to save a second Level with the same `zoneId` and `levelNumber`.","The second save attempt should fail and throw a duplicate key error.",Valid Zone, Level data,"Jest, Mongoose, mongodb-memory-server",1,TASK-2012-01
UT-MOD-004,Domain: Level Model,Functional,Unit,High,Yes,"Verify Level model validation for nested glyphs and obstacles","Test environment with in-memory DB is set up.","1. Attempt to save a Level with a `glyphs` array where a glyph is missing its `glyphId`. 2. Attempt to save a Level with an `obstacles` array where an obstacle is missing its `obstacleId`.","Mongoose should throw a `ValidationError` in both cases, indicating the required nested field is missing.",Level data with malformed nested objects,"Jest, Mongoose, mongodb-memory-server",1,TASK-2012-01
UT-MOD-005,Domain: Catalog Models,Functional,Unit,High,Yes,"Verify Glyph model's enum validation for 'type' field","Test environment with in-memory DB is set up.","1. Attempt to save a Glyph document with `type: 'invalid_type'`.","Mongoose should throw a `ValidationError` because the type is not in the allowed enum list.",Glyph data with invalid enum value,"Jest, Mongoose, mongodb-memory-server",0.5,TASK-2014-01
UT-MOD-006,Domain: ProceduralInstance Model,Functional,Unit,Highest,Yes,"Verify ProceduralInstance model enforces required fields","Test environment with in-memory DB is set up.","1. Attempt to save a ProceduralInstance without `baseLevelId`. 2. Attempt to save a ProceduralInstance without `generationSeed`.","Mongoose should throw a `ValidationError` in both cases.",N/A,"Jest, Mongoose, mongodb-memory-server",0.5,TASK-2013-01
IT-BOOT-001,Bootstrap,Functional,Integration,Highest,Yes,"Verify application starts successfully with a valid database connection","In-memory DB is running. A valid `MONGO_URI` is available as an environment variable.","1. Run the application's entry point (`src/index.ts`).","The application connects to the database, logs a success message, starts the Express server, and logs a message that it is listening on a port.",Valid MONGO_URI,"Jest, mongodb-memory-server",0.5,TASK-1013-01
IT-BOOT-002,Bootstrap,Functional,Integration,Highest,Yes,"Verify application exits gracefully if database connection fails","No DB is running, or an invalid `MONGO_URI` is provided.","1. Set an invalid `MONGO_URI` environment variable. 2. Run the application's entry point (`src/index.ts`).","The application attempts to connect, logs a connection error, and exits the process without starting the Express server.",Invalid MONGO_URI,"Jest, mongodb-memory-server",0.5,"TASK-3011-01,TASK-1013-03"
UT-SVC-001,Application: LevelService,Functional,Unit,Highest,Yes,"Verify LevelService `getLevelById` returns a mapped DTO on success","A mocked LevelRepository is created.","1. Configure the mock repository's `findById` to return a valid Level domain model. 2. Call `levelService.getLevelById` with the corresponding ID.","The service should return a `LevelDetailDto` containing the correct data. The repository's `findById` method should have been called exactly once.",Mocked Level domain object and corresponding DTO,Jest,0.5,TASK-4012-01
UT-SVC-002,Application: LevelService,Functional,Unit,High,Yes,"Verify LevelService `getLevelById` handles 'not found' case","A mocked LevelRepository is created.","1. Configure the mock repository's `findById` to return `null`. 2. Call `levelService.getLevelById` with an ID.","The service should throw a specific 'NotFound' error or return null, as per its defined contract. The repository's `findById` method should have been called.",N/A,Jest,0.5,TASK-4012-01
UT-SVC-003,Application: ContentCatalogService,Functional,Unit,High,Yes,"Verify ContentCatalogService aggregates data from multiple repositories","Mocked repositories for Glyph, Obstacle, and PuzzleType are created.","1. Configure each mock repository to return an array of its respective domain models. 2. Call `contentCatalogService.getFullCatalog()`.","The service should return a single `ContentCatalogDto` object containing three arrays: `glyphs`, `obstacles`, and `puzzleTypes`. Each repository's `findAll` (or equivalent) method should have been called once.",Mocked domain objects for all catalog types,Jest,1,TASK-4012-02
IT-DB-001,Infrastructure: Repositories,Functional,Integration,High,Yes,"Verify MongooseLevelRepository `findByZoneId` retrieves correct data","In-memory DB is running and seeded with test data.","1. Seed the database with two Levels in Zone A and one Level in Zone B. 2. Instantiate `MongooseLevelRepository`. 3. Call `repository.findByZoneId` with Zone A's ID.","The method should return an array containing exactly the two Level documents from Zone A.",Level and Zone test data,"Jest, Mongoose, mongodb-memory-server",1,TASK-3012-01
IT-API-001,API: Zones,Smoke,Integration,Highest,Yes,"Verify `GET /api/v1/zones` returns a list of zones","Application is running with an in-memory DB seeded with several Zone documents.","1. Send a GET request to `/api/v1/zones` using supertest.","The response status code should be 200. The response body should be a JSON array. Each object in the array should match the `ZoneSummaryDto` structure.",Zone test data,"Jest, Supertest, mongodb-memory-server",1,TASK-5013-01
IT-API-002,API: Zones,Functional,Integration,High,Yes,"Verify `GET /api/v1/zones/:id` returns a single zone's details","Application is running with an in-memory DB seeded with a specific Zone document.","1. Seed the DB with a Zone and get its ID. 2. Send a GET request to `/api/v1/zones/<ID>`.","The response status code should be 200. The response body should be a single JSON object matching the `ZoneDetailDto` structure and the seeded data.",Zone test data,"Jest, Supertest, mongodb-memory-server",1,TASK-5013-01
IT-API-003,API: Zones,Functional,Integration,High,Yes,"Verify `GET /api/v1/zones/:id` returns 404 for a non-existent ID","Application is running with an in-memory DB.","1. Generate a valid but non-existent MongoDB ObjectId. 2. Send a GET request to `/api/v1/zones/<ID>`.","The response status code should be 404. The response body should contain a JSON error message.",N/A,"Jest, Supertest, mongodb-memory-server",0.5,TASK-5013-01
IT-API-004,API: Procedural Instances,Functional,Integration,Highest,Yes,"Verify `POST /api/v1/procedural-instances` creates a new instance","Application is running with an in-memory DB. A template Level exists.","1. Construct a valid request body for `CreateProceduralInstanceDto`. 2. Send a POST request to `/api/v1/procedural-instances` with the body.","The response status code should be 201 Created. The response body should contain the ID of the newly created instance. A new document should exist in the database.",Valid `CreateProceduralInstanceDto` payload,"Jest, Supertest, mongodb-memory-server",1.5,TASK-5013-01
IT-API-005,API: Procedural Instances,Functional,Integration,High,Yes,"Verify `POST /api/v1/procedural-instances` returns 400 for invalid body","Application is running with an in-memory DB.","1. Construct a request body with a required field missing (e.g., `generationSeed`). 2. Send a POST request to `/api/v1/procedural-instances` with the invalid body.","The response status code should be 400 Bad Request. The response body should contain a JSON error message detailing the validation failure.",Invalid `CreateProceduralInstanceDto` payload,"Jest, Supertest, mongodb-memory-server",1,TASK-5013-01
IT-API-006,API: Content Catalogs,Functional,Integration,Highest,Yes,"Verify `GET /api/v1/content-catalogs` returns all aggregated catalogs","Application is running with an in-memory DB seeded with Glyphs, Obstacles, and PuzzleTypes.","1. Send a GET request to `/api/v1/content-catalogs`.","The response status code should be 200. The response body should be a single JSON object with keys `glyphs`, `obstacles`, and `puzzleTypes`, each containing an array of their respective DTOs.",Catalog test data,"Jest, Supertest, mongodb-memory-server",1.5,TASK-5013-01
IT-API-007,API: Error Handling,Functional,Integration,Highest,Yes,"Verify global error handler returns a 500 for unhandled service errors","Application is running. Service layer is mocked to throw an unexpected error.","1. Mock a service method (e.g., `levelService.getLevelsByZone`) to throw a generic `Error('Something went wrong')`. 2. Send a GET request to the corresponding endpoint (`/api/v1/levels/zone/:zoneId`).","The response status code should be 500. The response body should be a standardized JSON error object (e.g., `{ ""status"": ""error"", ""message"": ""Internal Server Error"" }`).",Mocked service error,Jest with Supertest,1,TASK-1014-02
DEPL-CICD-001,Deployment,Functional,System,High,Yes,"Verify Docker image builds successfully","Project code is available. Docker is installed.","1. Run `docker build -t glyph-content-service .` in the project root.","The command completes without errors and a Docker image named `glyph-content-service` is created.",N/A,Docker,1,TASK-6011-01
DEPL-CICD-002,Deployment,Smoke,System,High,Yes,"Verify Docker container starts and serves requests","A Docker image has been built. A running MongoDB instance is accessible from the container.","1. Run the Docker container, passing the `MONGO_URI` and `PORT` as environment variables. 2. Send a GET request to a health-check or simple API endpoint on the exposed port.","The container starts without crashing. The API request receives a 200 OK response.",Built Docker image,Docker,1.5,TASK-6011-01
DEPL-CICD-003,CI/CD,Functional,System,Highest,Yes,"Verify CI pipeline is triggered on push and runs tests","A CI pipeline is configured in `.github/workflows/`.","1. Create a new branch and push a commit to it. 2. Open a pull request to the main branch.","The CI pipeline should automatically trigger, run all steps (install, lint, test), and report a success or failure status on the pull request.",N/A,GitHub Actions,1,TASK-6012-01
DEPL-CICD-004,CI/CD,Functional,System,Highest,Yes,"Verify CI pipeline fails if tests fail","A CI pipeline is configured.","1. Introduce a failing test in the code. 2. Push the commit to trigger the CI pipeline.","The 'run tests' step in the pipeline should fail, causing the entire pipeline run to fail.",A failing test case,GitHub Actions,0.5,TASK-6012-01
DOC-API-001,API Documentation,Functional,System,High,No,"Verify Swagger/OpenAPI documentation UI is accessible","The application is running.","1. Navigate to the `/api-docs` endpoint in a web browser.","The Swagger UI interface should load and display the API title and a list of endpoints.",N/A,"Web Browser, Express",0.25,TASK-6013-01
DOC-API-002,API Documentation,Functional,Manual,High,No,"Verify API documentation accurately reflects an endpoint's structure","The application is running.","1. Open the `/api-docs` page. 2. Expand the `GET /api/v1/zones/:id` endpoint. 3. Compare the documented response schema with the `ZoneDetailDto` definition.","The documented schema in the UI should match the fields, types, and descriptions defined in the DTO and JSDoc comments.",N/A,"Web Browser, source code",0.5,TASK-6013-02
PERF-API-001,API Performance,Non-Functional,Performance,Medium,Yes,"Benchmark latency for high-traffic read endpoints","The application is deployed to a staging environment with a realistically sized database.","1. Use a load testing tool to send 100 requests per second to `GET /api/v1/content-catalogs` for 5 minutes. 2. Measure the p95 and p99 response times.","The p95 response time should be under 150ms. The p99 response time should be under 250ms. Error rate should be 0%.",A seeded database with thousands of catalog items,"k6, JMeter, or similar",8,RISK-002
PERF-API-002,API Performance,Non-Functional,Performance,Medium,Yes,"Benchmark database query performance under load","The application is deployed to a staging environment with a realistically sized database and monitoring tools.","1. Use a load testing tool to send 50 requests per second to `GET /api/v1/levels/zone/:zoneId` for 5 minutes. 2. Monitor database performance metrics.","The query execution time should remain low. The ratio of documents scanned to documents returned should be close to 1:1, indicating effective index usage.",A seeded database with a zone containing thousands of levels,"k6, JMeter, MongoDB Atlas Monitoring",8,RISK-002
SEC-DEPL-001,Security,Non-Functional,Security,High,Yes,"Scan Docker image for known vulnerabilities","A Docker image has been built by the CI pipeline.","1. Integrate a security scanner (e.g., Snyk, Trivy) as a step in the CI pipeline. 2. Configure the step to fail the build if high or critical vulnerabilities are found.","The pipeline step completes and reports the vulnerability scan results. The build fails if the vulnerability threshold is exceeded.",Built Docker image,"Snyk, Trivy, or similar",2,RISK-006
SEC-API-001,Security,Non-Functional,Security,Medium,No,"Verify API does not expose sensitive information in error messages","Application is running in a staging environment.","1. Trigger a variety of server-side errors (e.g., database disconnect, file system error). 2. Inspect the JSON response returned to the client.","The error response should be a generic message (e.g., 'Internal Server Error') and should not contain stack traces, file paths, or specific database error details.",N/A,"curl, Postman",2,TASK-1014-02