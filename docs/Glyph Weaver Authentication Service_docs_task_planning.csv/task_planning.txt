Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Initialize npm and install dependencies","Create the `package.json` file by running `npm init` and adding all production and development dependencies specified in SDS 3.3. Define `start`, `build`, and `dev` scripts.","Configuration","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3.2,"setup,configuration,WI-101","Sprint 1","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Requires access to public npm registry.","US-101","","2024-05-27 10:00","2024-05-27 10:00","npm,Node.js"
"Configure TypeScript compiler options","Create the `tsconfig.json` file with the exact configuration from SDS 3.2, ensuring strict type checking, correct module system, and output directory settings.","Configuration","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",2,"setup,configuration,typescript,WI-102","Sprint 1","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","","US-101","TASK-101-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript"
"Create environment variable template (.env.example)","Create the `.env.example` file containing all the configuration keys specified in SDS 3.1, with placeholder values.","Configuration","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",1.5,"setup,configuration,security,WI-103","Sprint 1","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Ensure .env is in .gitignore","US-101","","2024-05-27 10:00","2024-05-27 10:00","Node.js"
"Implement type-safe config module","Implement a module at `src/config/index.ts` that uses `dotenv` to load environment variables, validates their presence and type, and exports a frozen, strongly-typed configuration object.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",6.2,"configuration,typescript,WI-103","Sprint 1","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Application should fail fast if required variables are missing.","US-101","TASK-101-01,TASK-103-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript,Node.js,dotenv"
"Setup and configure Jest for TypeScript","Install Jest, `ts-jest`, and related `@types` packages. Create `jest.config.js` to configure the test environment (`node`), specify the `ts-jest` preset, and set up coverage collection.","Configuration","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",5.8,"testing,jest,setup,WI-601","Sprint 1","Quality and Operations","Glyph Weaver Authentication Service","jest.config.js","This is a prerequisite for all testing tasks.","US-601","TASK-101-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript,npm"
"Unit test the config module","Write unit tests for the configuration module to ensure it correctly parses variables and throws errors when required variables are missing.","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",2.8,"testing,unit-test,WI-103","Sprint 1","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","src/config/config.spec.ts","","US-101","TASK-103-02,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement User Mongoose schema and model","Create `src/domain/models/user.model.ts` defining the `UserSchema` as per SDS 5.3. Include fields for email, passwordHash, platformIdentities, and lastLoginAt. Configure indexes (unique sparse on email, compound on platformIdentities) and schema options (`select: false` for password, timestamps).","Development","Backlog","High","db_specialist@glyphweaver.com","pm@glyphweaver.com","",5.2,"database,mongoose,model,WI-201","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","src/domain/models/user.model.ts","Risk: R003: Incorrectly configured indexes","US-201","TASK-101-01","2024-05-27 10:00","2024-05-27 10:00","Mongoose,MongoDB,TypeScript"
"Implement Refresh Token Mongoose schema and model","Create `src/domain/models/token.model.ts` defining the `TokenSchema`. Include `userId` (ref to User), `token`, and `expiresAt`. Critically, implement a TTL index on `expiresAt` for automatic document cleanup.","Development","Backlog","High","db_specialist@glyphweaver.com","pm@glyphweaver.com","",3.5,"database,mongoose,model,WI-202","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","src/domain/models/token.model.ts","TTL index is critical for automated cleanup. Risk: R003.","US-201","TASK-201-01","2024-05-27 10:00","2024-05-27 10:00","Mongoose,MongoDB,TypeScript"
"Define repository interfaces (IUserRepository, ITokenRepository)","Create TypeScript interfaces in `src/domain/repositories/` that define the data access contract. `IUserRepository` will include methods like `findById`, `findByEmail`, `findByPlatformId`, and `create`. `ITokenRepository` will include `save`, `findByToken`, `delete`.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3,"design-pattern,repository,typescript,WI-203","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","","This defines the contract for data access.","US-202","","2024-05-27 10:00","2024-05-27 10:00","TypeScript"
"Implement MongoUserRepository","Create the `MongoUserRepository` class in `src/infrastructure/persistence/` that implements the `IUserRepository` interface. Use the Mongoose UserModel to implement all required methods. The `findByEmail` method must explicitly select the password hash.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",6.2,"database,repository,mongoose,WI-204","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","","`findByEmail` must use `.select('+passwordHash')`.","US-202","TASK-201-01,TASK-203-01","2024-05-27 10:00","2024-05-27 10:00","Mongoose,TypeScript"
"Implement MongoTokenRepository","Create the `MongoTokenRepository` class in `src/infrastructure/persistence/` that implements `ITokenRepository`. Use the Mongoose TokenModel to implement `save`, `findByToken`, and `delete` methods.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",5,"database,repository,mongoose,WI-206","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","","","US-202","TASK-202-01,TASK-203-01","2024-05-27 10:00","2024-05-27 10:00","Mongoose,TypeScript"
"Implement database connection manager","Create `src/infrastructure/database/db.connection.ts`. This module will export an async `connectDB` function that uses Mongoose to connect to the MongoDB URI from the config. It should also log connection events (connected, error, disconnected).","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3.2,"database,mongoose,connection,WI-205","Sprint 1","Domain and Persistence Layer","Glyph Weaver Authentication Service","","Risk: R004: Ungraceful DB connection handling","US-202","TASK-103-02","2024-05-27 10:00","2024-05-27 10:00","Mongoose,Node.js"
"Implement PasswordService","Create `src/application/services/password.service.ts` to encapsulate password hashing and comparison logic using `bcryptjs`. The number of salt rounds should be read from the configuration.","Development","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",2.7,"security,service,password,WI-301","Sprint 1","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Risk: R005: Insufficient bcrypt salt rounds. Recommend pair programming.","US-301","TASK-103-02","2024-05-27 10:00","2024-05-27 10:00","bcryptjs,TypeScript"
"Unit test PasswordService","Write unit tests for `PasswordService` to verify that hashing and comparison work as expected.","Testing","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",2.1,"testing,unit-test,WI-301","Sprint 1","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Achieve 100% code coverage for this critical service.","US-301","TASK-301-01,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement TokenService for JWT generation and refresh token rotation","Create `src/application/services/token.service.ts`. Implement `generateAuthTokens` to create JWT access/refresh tokens and save the refresh token to the DB. Implement `verifyRefreshToken` to validate the token, check it against the DB, and crucially, delete it after use to enforce rotation.","Development","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",9.5,"security,service,jwt,WI-302","Sprint 1","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Critical security task. Risk: R006. Mandate pair programming and a focused security code review.","US-301","TASK-103-02,TASK-203-01,TASK-206-01","2024-05-27 10:00","2024-05-27 10:00","jsonwebtoken,TypeScript,Security"
"Unit test TokenService","Write comprehensive unit tests for `TokenService`. Mock `ITokenRepository`. Test successful token generation and verification. Critically, test all failure paths for `verifyRefreshToken`: invalid signature, token not in DB, and ensure the repository's `delete` method is called on success.","Testing","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",7.2,"testing,unit-test,security,WI-302","Sprint 1","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Test all edge cases and states of the rotation logic. Risk: R006.","US-301","TASK-302-01,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement Winston structured logger","Create `src/infrastructure/logging/logger.ts`. Configure a Winston logger instance that uses a `Console` transport. The log format should be conditional on `NODE_ENV`: colorized and simple for development, timestamped JSON for production.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",5.2,"logging,winston,observability,WI-501","Sprint 1","Security and Cross-Cutting Concerns","Glyph Weaver Authentication Service","","","US-501","TASK-103-02","2024-05-27 10:00","2024-05-27 10:00","Winston,Node.js,TypeScript"
"Implement global error handling middleware","Create `src/api/v1/middleware/error.handler.ts`. The middleware should take four arguments `(err, req, res, next)`. It should inspect the error type to set the status code, log the full error, and send a structured JSON response. The response must not leak stack traces in production.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",6,"api,middleware,error-handling,WI-503","Sprint 1","Security and Cross-Cutting Concerns","Glyph Weaver Authentication Service","","Risk: R011: Leaking sensitive information in errors.","US-502","TASK-501-01","2024-05-27 10:00","2024-05-27 10:00","Express.js,TypeScript"
"Implement all Data Transfer Objects (DTOs) with validation","Create the four DTO class files in `src/api/v1/dtos/` as specified in SDS 4.1. Use `class-validator` decorators (`@IsEmail`, `@MinLength`, etc.) to enforce validation rules on request bodies.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3.2,"api,dto,validation,WI-403","Sprint 1","API Layer (Presentation)","Glyph Weaver Authentication Service","","Risk: R008: Insufficient DTO validation.","US-401","TASK-101-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript,class-validator"
"Implement PlatformTokenValidator service","Create `src/infrastructure/platform/platform-token-validator.service.ts` and its interface. The `validate` method will use a switch statement on the platform. It will use `google-auth-library` to validate Google tokens and `node-apple-signin-auth` for Apple tokens, passing the respective Client IDs from config for audience validation.","Development","Backlog","High","integration_specialist@glyphweaver.com","pm@glyphweaver.com","",12,"integration,security,google,apple,WI-504","Sprint 2","Security and Cross-Cutting Concerns","Glyph Weaver Authentication Service","","Critical security task. Risks: R009, R010. Must validate 'audience' claim.","US-503","TASK-103-02","2024-05-27 10:00","2024-05-27 10:00","google-auth-library,node-apple-signin-auth,TypeScript"
"Unit test PlatformTokenValidator","Write unit tests for `PlatformTokenValidator`. Mock the `google-auth-library` and `node-apple-signin-auth` libraries completely. Test that the correct SDK method is called for each platform. Test success paths and failure paths (e.g., when the mocked SDK throws an error).","Testing","Backlog","High","integration_specialist@glyphweaver.com","pm@glyphweaver.com","",9.3,"testing,unit-test,integration,WI-504","Sprint 2","Security and Cross-Cutting Concerns","Glyph Weaver Authentication Service","","Mocking external SDKs can be complex. Risk: R010.","US-503","TASK-504-01,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement email/password logic in AuthService","In `AuthService`, implement the `registerUser` and `authenticateByEmail` methods. `registerUser` will check for existing users, call `passwordService` to hash the password, and `userRepository` to create the user. `authenticateByEmail` will find the user and compare the password hash.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",7.2,"service,business-logic,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","","US-302","TASK-204-01,TASK-301-01,TASK-302-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript,Node.js"
"Unit test email registration and login in AuthService","Write unit tests for the `registerUser` and `authenticateByEmail` methods in `AuthService`. Mock all repository and service dependencies.","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3.7,"testing,unit-test,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","","US-302","TASK-303-01,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement platform login logic in AuthService","In `AuthService`, implement the `authenticateByPlatformToken` method. This method will call `platformTokenValidator.validate`, then use the returned payload to find an existing user (by platform ID or email) or create a new user. It handles linking a new platform ID to an existing email account.","Development","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",9.3,"service,business-logic,security,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Critical security task. Risk: R007. Mandate security review on account linking logic.","US-303","TASK-204-01,TASK-302-01,TASK-504-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript,Node.js,Security"
"Unit test platform login in AuthService","Write unit tests for `authenticateByPlatformToken`. Mock dependencies. Test the three main scenarios: 1) existing platform user logs in, 2) new user logs in, 3) existing email user logs in with a new platform for the first time (account linking).","Testing","Backlog","High","security_specialist@glyphweaver.com","pm@glyphweaver.com","",5.2,"testing,unit-test,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Risk: R007. Test account linking edge cases carefully.","US-303","TASK-303-02,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement token refresh logic in AuthService","In `AuthService`, implement the `refreshAuthTokens` method. It will call `tokenService.verifyRefreshToken` to validate the incoming token and get the user payload. It will then find the user via `userRepository` and generate a new token pair using `tokenService.generateAuthTokens`.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",6.3,"service,business-logic,security,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","Depends heavily on the correctness of TokenService. Risk: R006.","US-304","TASK-204-01,TASK-302-01","2024-05-27 10:00","2024-05-27 10:00","TypeScript,Node.js"
"Unit test token refresh in AuthService","Write unit tests for `refreshAuthTokens`. Mock dependencies. Test the success path where a new token pair is generated. Test failure paths where `tokenService.verifyRefreshToken` throws an error and where the user from the token payload is not found in the repository.","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",4.2,"testing,unit-test,WI-303","Sprint 2","Core Authentication Logic (Application Layer)","Glyph Weaver Authentication Service","","","US-304","TASK-303-03,TASK-601-01","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Consolidated Service Unit Tests Task","This task represents the combined effort of writing all service-level unit tests, which are already defined in their respective feature tasks (TASK-301-02, TASK-302-02, TASK-303-04, TASK-303-05, TASK-303-06). This is a meta-task for tracking purposes.","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",0,"testing,unit-test,meta,WI-602","Sprint 2","Quality and Operations","Glyph Weaver Authentication Service","","This is a tracking task. Effort is accounted for in individual test tasks.","US-602","TASK-301-02,TASK-302-02,TASK-303-04,TASK-303-05,TASK-303-06","2024-05-27 10:00","2024-05-27 10:00","Jest,TypeScript"
"Implement AuthController","Create `src/api/v1/controllers/auth.controller.ts`. The `AuthController` class will inject `AuthService`. Implement methods for `register`, `loginWithEmail`, `loginWithPlatform`, and `refreshToken`. Each method will extract the DTO from the request body, call the corresponding service method, and send the response or pass errors to `next`.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",6,"api,controller,express,WI-402","Sprint 2","API Layer (Presentation)","Glyph Weaver Authentication Service","","This connects the API layer to the application layer.","US-402","TASK-303-01,TASK-303-02,TASK-303-03,TASK-403-01","2024-05-27 10:00","2024-05-27 10:00","Express.js,TypeScript"
"Implement auth API routes","Create `src/api/v1/routes/auth.routes.ts` to define an Express Router. Define `POST` routes for `/register`, `/login/email`, `/login/platform`, and `/token/refresh`, mapping them to the (yet to be created) `AuthController` methods.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",2.7,"api,routing,express,WI-401","Sprint 2","API Layer (Presentation)","Glyph Weaver Authentication Service","","","US-401","TASK-402-01","2024-05-27 10:00","2024-05-27 10:00","Express.js,TypeScript"
"Implement Express app setup in app.ts","Create `src/app.ts` to instantiate the Express application. Configure middleware for CORS, JSON body parsing, and initialize Passport.js. Mount the main API router and register the global error handler last.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",4.2,"express,middleware,WI-104","Sprint 2","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Middleware order is critical. Error handler must be last. Risk: R011.","US-102","TASK-101-01,TASK-401-01,TASK-503-01","2024-05-27 10:00","2024-05-27 10:00","Express.js,TypeScript"
"Implement application entrypoint in index.ts","Create `src/index.ts` to act as the application's main entrypoint. This file will import the app from `app.ts`, load configuration, establish the database connection, and start the HTTP server.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",4.3,"server,bootstrap,WI-105","Sprint 2","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Connect to DB before starting the server. Risk: R004.","US-102","TASK-104-01,TASK-205-01","2024-05-27 10:00","2024-05-27 10:00","Node.js,TypeScript"
"Implement graceful shutdown logic","Enhance `index.ts` to listen for `SIGINT` and `SIGTERM` signals to perform a graceful shutdown. This includes closing the server and the database connection before exiting the process.","Development","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",3.2,"server,operations,WI-105","Sprint 2","Project Scaffolding and Core Configuration","Glyph Weaver Authentication Service","","Ensures clean shutdown in containerized environments.","US-102","TASK-105-01","2024-05-27 10:00","2024-05-27 10:00","Node.js"
"Setup integration test environment and helpers","Configure Jest to manage a separate test database. Create helper functions for starting/stopping the Express app in-memory, connecting/disconnecting the test DB, and clearing collections between tests.","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",8.3,"testing,integration-test,setup,WI-603","Sprint 2","Quality and Operations","Glyph Weaver Authentication Service","","Crucial for reliable integration tests. Risk: R012: Flaky tests due to poor DB cleanup.","US-603","TASK-601-01,TASK-104-01","2024-05-27 10:00","2024-05-27 10:00","Jest,Supertest,MongoDB"
"Write integration tests for all auth endpoints","Using `supertest` and the test helpers, write integration tests for the four authentication endpoints. Cover success cases (200/201), DTO validation errors (400), authentication errors (401), and conflict errors (409).","Testing","Backlog","High","dev_team@glyphweaver.com","pm@glyphweaver.com","",16.7,"testing,integration-test,WI-603","Sprint 2","Quality and Operations","Glyph Weaver Authentication Service","","This validates the full request-response cycle through all layers. Risk: R012.","US-603","TASK-603-01,TASK-402-01","2024-05-27 10:00","2024-05-27 10:00","Jest,Supertest,Express.js"
"Create multi-stage Dockerfile","Create a `Dockerfile` that uses multi-stage builds. The `build` stage will install all dependencies, compile TypeScript. The final stage will copy from the `build` stage only the `dist` folder, production `node_modules`, and `package.json` into a minimal Node.js base image.","Infrastructure","Backlog","High","devops_specialist@glyphweaver.com","pm@glyphweaver.com","",6.3,"docker,devops,containerization,WI-604","Sprint 3","Quality and Operations","Glyph Weaver Authentication Service","Dockerfile,.dockerignore","Risk: R013: Bloated Docker image. Multi-stage build is key.","US-604","TASK-101-01,TASK-102-01","2024-05-27 10:00","2024-05-27 10:00","Docker"
"Setup CI pipeline (GitHub Actions)","Create a GitHub Actions workflow file in `.github/workflows/`. The pipeline will trigger on pushes to `main`. It will have jobs for: 1) Linting, 2) Running all tests (unit and integration), and 3) Building the Docker image.","Deployment","Backlog","High","devops_specialist@glyphweaver.com","pm@glyphweaver.com","",8.2,"ci-cd,devops,github-actions,WI-605","Sprint 3","Quality and Operations","Glyph Weaver Authentication Service",".github/workflows/ci.yml","Risk: R014: CI pipeline lacks security scanning.","US-604","TASK-601-01,TASK-604-01","2024-05-27 10:00","2024-05-27 10:00","CI/CD,YAML,GitHub Actions"
"Add security scanning to CI pipeline","Enhance the CI pipeline by adding a job that performs automated security scanning. This job will run `npm audit --production` to check for known vulnerabilities in dependencies and fail the build if any high or critical vulnerabilities are found.","Deployment","Backlog","High","devops_specialist@glyphweaver.com","pm@glyphweaver.com","",4.2,"ci-cd,devops,security,WI-605","Sprint 3","Quality and Operations","Glyph Weaver Authentication Service",".github/workflows/ci.yml","Fails build on high/critical vulnerabilities. Risk: R014.","US-604","TASK-605-01","2024-05-27 10:00","2024-05-27 10:00","CI/CD,YAML,Security"