test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
AUTH-U-CFG-001,Configuration,Functional,Unit,Highest,Yes,"Verify that the config loader successfully loads variables from a .env file","A .env file exists with valid key-value pairs (e.g., PORT=5000).","1. Import the config module. 2. Access a property that is defined in the .env file (e.g., config.port).","The value returned matches the value in the .env file and is of the correct type (e.g., 5000, not '5000').",".env file with PORT, JWT_SECRET etc.",Jest,Low,WI-003
AUTH-U-CFG-002,Configuration,Functional,Unit,Highest,Yes,"Verify that the application throws an error and exits if a required environment variable is missing","The application is started with a required environment variable (e.g., JWT_SECRET) being undefined.","1. Mock `process.env` to remove a required variable. 2. Attempt to import and initialize the config module.","The application throws a specific, descriptive error and the process exits.",None,Jest,Low,WI-003-01
AUTH-U-SEC-001,Security,Functional,Unit,Highest,Yes,"Verify PasswordHasherService correctly hashes a password","The PasswordHasherService is instantiated.","1. Call the `hash()` method with a plaintext password.","The method returns a string that is a valid bcrypt hash and is not the same as the plaintext password.",Plaintext password (e.g., 'ValidPassword123!'),Jest,Low,"WI-007, WI-015"
AUTH-U-SEC-002,Security,Functional,Unit,Highest,Yes,"Verify PasswordHasherService correctly compares a valid password to its hash","The PasswordHasherService is instantiated.","1. Hash a plaintext password. 2. Call the `compare()` method with the same plaintext password and the generated hash.","The `compare()` method returns `true`.",Plaintext password and its corresponding hash.,Jest,Low,"WI-007, WI-015"
AUTH-U-SEC-003,Security,Functional,Unit,Highest,Yes,"Verify PasswordHasherService correctly rejects an invalid password","The PasswordHasherService is instantiated.","1. Hash a plaintext password. 2. Call the `compare()` method with an incorrect password and the generated hash.","The `compare()` method returns `false`.",Plaintext password, its hash, and a different incorrect password.,Jest,Low,"WI-007, WI-015"
AUTH-U-JWT-001,Security,Functional,Unit,Highest,Yes,"Verify TokenService generates valid access and refresh tokens","TokenService is instantiated with valid secrets and expiry configurations.","1. Define a user payload (e.g., `{ userId: 'user-uuid' }`). 2. Call `generateTokens()` with the payload.","The method returns an object with `accessToken` and `refreshToken` properties, both of which are valid JWT strings.",User ID payload,Jest,Medium,"WI-006, WI-015"
AUTH-U-JWT-002,Security,Functional,Unit,Highest,Yes,"Verify TokenService can successfully verify a valid access token","TokenService is instantiated. A valid access token is generated.","1. Call `verifyAccessToken()` with the valid token.","The method returns the original user payload.",Valid access token,Jest,Medium,"WI-006, WI-015"
AUTH-U-JWT-003,Security,Functional,Unit,Highest,Yes,"Verify TokenService throws an error for an expired access token","TokenService is instantiated. An access token is generated with a 1ms expiry.","1. Wait for 2ms. 2. Call `verifyAccessToken()` with the expired token.","The method throws a `TokenExpiredError` or a similar specific error.",Access token with very short expiry.,Jest,Medium,"WI-006, WI-015"
AUTH-U-JWT-004,Security,Functional,Unit,Highest,Yes,"Verify TokenService throws an error for an invalid signature","TokenService is instantiated with a specific secret. A token is signed with a different secret.","1. Call `verifyAccessToken()` with the token signed with the wrong secret.","The method throws a `JsonWebTokenError` for an invalid signature.",Token signed with a different secret.,Jest,Medium,"WI-006, WI-015"
AUTH-U-REG-001,Registration,Functional,Unit,Highest,Yes,"Test successful user registration in AuthenticationService","Dependencies (PlayerRepository, PasswordHasher, TokenService, AuditLogger) are mocked. `playerRepository.findByEmail` returns null.","1. Create a valid `RegisterRequestDto`. 2. Call `authenticationService.register()`.","The service returns player and token data. Asserts that `passwordHasher.hash`, `playerRepository.create`, `tokenService.generateTokens`, and `auditLogger.logEvent` were all called once with the correct arguments.",Valid registration DTO.,Jest,High,"WI-008-02, WI-016"
AUTH-U-REG-002,Registration,Functional,Unit,Highest,Yes,"Test user registration failure when username already exists","Dependencies are mocked. `playerRepository.findByEmail` returns a mock user object.","1. Create a `RegisterRequestDto` with an existing email. 2. Call `authenticationService.register()`.","The method throws a `ConflictError`. Asserts that `playerRepository.create` was NOT called.",Registration DTO with an email that the mock repository will return as 'existing'.,Jest,Medium,"WI-008-02, WI-016"
AUTH-U-LGN-001,Login,Functional,Unit,Highest,Yes,"Test successful user login in AuthenticationService","Dependencies are mocked. `playerRepository.findByEmail` returns a mock user with a hashed password. `passwordHasher.compare` returns true.","1. Create a valid `LoginRequestDto`. 2. Call `authenticationService.login()`.","The service returns new tokens. Asserts `tokenService.generateTokens` and `auditLogger.logEvent` (with LOGIN_SUCCESS) were called.",Valid login DTO.,Jest,High,"WI-008-03, WI-016"
AUTH-U-LGN-002,Login,Functional,Unit,Highest,Yes,"Test login failure when user is not found","Dependencies are mocked. `playerRepository.findByEmail` returns null.","1. Create a `LoginRequestDto` for a non-existent user. 2. Call `authenticationService.login()`.","The method throws an `UnauthorizedError`. Asserts `auditLogger.logEvent` was called with LOGIN_FAILURE.",Login DTO for a user the mock repository will return as 'not found'.,Jest,Medium,"WI-008-03, WI-016"
AUTH-U-LGN-003,Login,Functional,Unit,Highest,Yes,"Test login failure when password does not match","Dependencies are mocked. `playerRepository.findByEmail` returns a mock user. `passwordHasher.compare` returns false.","1. Create a `LoginRequestDto` with a wrong password. 2. Call `authenticationService.login()`.","The method throws an `UnauthorizedError`. Asserts `auditLogger.logEvent` was called with LOGIN_FAILURE.",Login DTO with a password that the mock hasher will return as 'non-matching'.,Jest,Medium,"WI-008-03, WI-016"
AUTH-I-REG-001,Registration,Functional,Integration,Highest,Yes,"Test POST /register endpoint with valid data","The API is running in-memory with mocked service layer.","1. Send a POST request to `/api/v1/auth/register` with a valid JSON body (username, email, password).","The API returns a 201 Created status. The response body contains `accessToken`, `refreshToken`, and `userId`.",Valid registration JSON payload.,supertest, Jest,Medium,"WI-017-02, WI-010"
AUTH-I-REG-002,Registration,Functional,Integration,Highest,Yes,"Test POST /register with missing required fields","The API is running in-memory.","1. Send a POST request to `/api/v1/auth/register` with a JSON body missing the `password` field.","The API returns a 400 Bad Request status. The response body contains a descriptive validation error message.",JSON payload missing a required field.,supertest, Jest,Low,"WI-017-02, WI-009-02"
AUTH-I-REG-003,Registration,Functional,Integration,Highest,Yes,"Test POST /register with invalid password format","The API is running in-memory.","1. Send a POST request to `/api/v1/auth/register` with a password that is too short or lacks required characters.","The API returns a 400 Bad Request status. The response body contains a descriptive validation error message about the password complexity.",JSON payload with a weak password (e.g., 'pass').,supertest, Jest,Medium,"WI-017-02, WI-009-01"
AUTH-I-REG-004,Registration,Functional,Integration,Highest,Yes,"Test POST /register with an already existing email (conflict)","The API is running in-memory. The mocked `AuthenticationService.register` is configured to throw a `ConflictError`.","1. Send a POST request to `/api/v1/auth/register` with data that will trigger the conflict.","The API returns a 409 Conflict status. The response body contains an appropriate error message.",JSON payload for a user that the mocked service will treat as existing.,supertest, Jest,Medium,"WI-017-02, WI-012-02"
AUTH-I-LGN-001,Login,Functional,Integration,Highest,Yes,"Test POST /login endpoint with valid credentials","The API is running in-memory. A user has been 'registered' in the mocked service layer.","1. First, register a user. 2. Send a POST request to `/api/v1/auth/login` with the correct email and password.","The API returns a 200 OK status. The response body contains `accessToken` and `refreshToken`.",Valid login credentials for a pre-registered user.,supertest, Jest,Medium,WI-017-02
AUTH-I-LGN-002,Login,Functional,Integration,Highest,Yes,"Test POST /login with invalid credentials (wrong password)","The API is running in-memory. The mocked `AuthenticationService.login` is configured to throw an `UnauthorizedError`.","1. Send a POST request to `/api/v1/auth/login` with an incorrect password.","The API returns a 401 Unauthorized status. The response body contains an appropriate error message.",Login credentials with incorrect password.,supertest, Jest,Medium,"WI-017-02, WI-012-02"
AUTH-I-RFH-001,Token Refresh,Functional,Integration,High,Yes,"Test POST /refresh endpoint with a valid refresh token","The API is running in-memory. A user has logged in and received tokens.","1. Log in to get a valid `refreshToken`. 2. Send a POST request to `/api/v1/auth/refresh` with the `refreshToken`.","The API returns a 200 OK status. The response body contains a new `accessToken` and `refreshToken`.",A valid refresh token obtained from a login.,supertest, Jest,Medium,WI-017-03
AUTH-I-RFH-002,Token Refresh,Functional,Integration,High,Yes,"Test POST /refresh endpoint with an invalid refresh token","The API is running in-memory.","1. Send a POST request to `/api/v1/auth/refresh` with an invalid or expired token.","The API returns a 401 Unauthorized status.",An invalid/malformed JWT string.,supertest, Jest,Medium,WI-017-03
AUTH-I-LNK-001,Account Linking,Security,Integration,High,Yes,"Test POST /link-platform endpoint with a valid access token","The API is running in-memory. A user has logged in and received an access token.","1. Log in to get a valid `accessToken`. 2. Send a POST request to `/api/v1/auth/link-platform` with a valid body and the `Authorization: Bearer <token>` header.","The API returns a 204 No Content status, indicating success.",A valid access token and a platform linking payload.,supertest, Jest,Medium,WI-017-04
AUTH-I-LNK-002,Account Linking,Security,Integration,High,Yes,"Test POST /link-platform endpoint without an access token","The API is running in-memory.","1. Send a POST request to `/api/v1/auth/link-platform` without the `Authorization` header.","The API returns a 401 Unauthorized status.",Platform linking payload.,supertest, Jest,Medium,"WI-017-04, WI-013"
AUTH-I-LNK-003,Account Linking,Security,Integration,High,Yes,"Test POST /link-platform endpoint with an expired access token","The API is running in-memory. An expired access token is available.","1. Send a POST request to `/api/v1/auth/link-platform` with an expired `accessToken` in the `Authorization` header.","The API returns a 401 Unauthorized status.",An expired access token.,supertest, Jest,Medium,"WI-017-04, WI-013"
AUTH-I-API-001,API,Functional,Integration,High,Yes,"Test global error handler for custom errors","The API is running in-memory. A route is configured to throw a specific custom error (e.g., `ConflictError`).","1. Make a request to the test route.","The API returns the correct HTTP status code associated with the custom error (e.g., 409) and a standardized JSON error body.",None,supertest, Jest,Medium,WI-012-02
AUTH-I-API-002,API,Functional,Integration,High,Yes,"Test global error handler for generic errors in production mode","The API is running in-memory with `NODE_ENV=production`. A route is configured to throw a generic `Error`.","1. Make a request to the test route.","The API returns a 500 Internal Server Error status. The response body is a generic message and does NOT contain the error's stack trace.",None,supertest, Jest,High,"WI-012-02, RISK-SEC-003"
AUTH-I-API-003,API,Functional,Integration,Medium,Yes,"Test 404 handler for non-existent routes","The API is running in-memory.","1. Send a GET request to a completely unknown route, e.g., `/api/v1/this/does/not/exist`.","The API returns a 404 Not Found status with a standard error message.",None,supertest, Jest,Low,WI-012-01
AUTH-S-DKR-001,Deployment,Smoke,System,High,Yes,"Verify Docker container builds and starts successfully","A valid `Dockerfile` exists in the project root.","1. Run `docker build -t auth-service-test .`. 2. Run `docker run -p 3001:3001 auth-service-test`. 3. Check container logs.","The build completes without error. The container starts, and logs indicate the server is listening on the configured port.",None,Docker, CI/CD Runner,Medium,"WI-019-01, WI-019-02"
AUTH-S-DKR-002,Deployment,Smoke,System,High,Yes,"Verify a basic health check endpoint on the running container","The application is running inside a Docker container. A simple `/health` endpoint is added that returns 200 OK.","1. Start the containerized application. 2. Send a GET request to `http://localhost:3001/health`.","The API returns a 200 OK status.",None,"cURL, Docker, CI/CD Runner",Low,WI-019-02
AUTH-P-LGN-001,Login,Performance,Performance,High,No,"Benchmark /login endpoint under sustained load","A deployed instance of the service is available in a test environment.","1. Use a load testing tool to simulate 50 concurrent users continuously hitting the `/login` endpoint for 5 minutes.","P95 response time remains under 200ms. Error rate is less than 0.1%. CPU usage on the service instance remains below 75%.",A pool of 100 test user accounts.,k6 / JMeter,High,"RISK-TECH-001, WI-010"
AUTH-P-REG-001,Registration,Performance,Performance,High,No,"Benchmark /register endpoint under burst load","A deployed instance of the service is available in a test environment.","1. Use a load testing tool to simulate a spike of 200 new user registrations over a 1-minute period.","P95 response time remains under 400ms (bcrypt is slow). Error rate (excluding conflicts) is less than 0.1%. The service does not crash.",A list of 200 unique usernames/emails.,k6 / JMeter,High,"RISK-TECH-001, WI-010"
AUTH-SEC-RAT-001,Security,Security,System,Highest,Partial,"Verify rate limiting on the /login endpoint","The service is deployed with rate limiting middleware configured (e.g., 10 requests per minute).","1. Send 10 POST requests to `/login` from the same IP within a minute. 2. Send the 11th request immediately after.","The first 10 requests receive a response (e.g., 401 Unauthorized). The 11th request receives a 429 Too Many Requests response.",None,"Postman, Script",Medium,"RISK-OPS-001, WI-010"
AUTH-SEC-HDR-001,Security,Security,System,High,Yes,"Verify security headers are present in responses","The service is deployed with Helmet middleware.","1. Send a GET request to any valid endpoint. 2. Inspect the response headers.","The response includes security headers like `X-Content-Type-Options: nosniff`, `X-Frame-Options: SAMEORIGIN`, `Strict-Transport-Security`, etc.",None,"cURL, Postman, ZAP",Low,WI-012-01