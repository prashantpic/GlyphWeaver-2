test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
IAP-T-001,Project Setup,Functional,System,Critical,Manual Only,"Verify project initialization and dependency installation","Developer has Node.js and npm/yarn installed. Repository is cloned.","1. Open a terminal in the project root. 2. Run `npm install`.","The command completes successfully without any errors. The `node_modules` directory is created.","N/A","npm",0.5,TASK-IAP-001-01
IAP-T-002,Project Setup,Functional,System,Critical,Manual Only,"Verify TypeScript compilation","Project dependencies are installed successfully.","1. Open a terminal in the project root. 2. Run `npm run build`.","The command completes successfully. A `dist` directory is created containing the compiled JavaScript files.","N/A","npm, TypeScript",0.5,TASK-IAP-002-01
IAP-T-003,Configuration,Functional,Unit,Critical,High,"Verify environment variables are loaded from a .env file","The `dotenv` library is installed. A `.env` file exists with `TEST_VAR=hello_world`.","1. Create a test script that imports and configures `dotenv`. 2. Access `process.env.TEST_VAR`. 3. Assert that its value is 'hello_world'.","The assertion passes, confirming the variable was loaded from the file.","A `.env` file with a known key-value pair.","Jest, Node.js",1,TASK-IAP-003-01
IAP-T-004,Configuration,Functional,System,Critical,Manual Only,"Verify .env.example file exists and is accurate","The SDS is finalized.","1. Check the root of the project repository. 2. Open the `.env.example` file. 3. Compare the variable names against the list in the SDS (MONGO_DB_CONNECTION_STRING, JWT_SECRET, etc.).","The `.env.example` file exists. All required environment variables listed in the SDS are present in the file with placeholder values. `.env` is listed in `.gitignore`.","N/A","Git client",0.5,TASK-IAP-003-01
IAP-T-005,Database,Functional,Integration,Critical,High,"Verify successful database connection on application startup","A MongoDB instance is running and accessible. The `MONGO_DB_CONNECTION_STRING` environment variable is set to a valid connection string.","1. Start the application. 2. Observe the application logs.","The application logs a success message indicating a connection to MongoDB has been established. The application does not crash.","Valid MongoDB connection string.","Node.js, MongoDB",1.5,TASK-IAP-004-01
IAP-T-006,Database,Functional,Integration,Critical,High,"Verify graceful exit on invalid database connection string","The `MONGO_DB_CONNECTION_STRING` environment variable is set to an invalid or malformed string.","1. Start the application. 2. Observe the application logs and exit code.","The application logs a clear error message specifying the connection failure. The application process exits gracefully (e.g., with exit code 1).","Invalid MongoDB connection string.","Node.js",1.5,TASK-IAP-004-01
IAP-T-007,Database,Resilience,Integration,Critical,High,"Verify database reconnection logic","Application is running and connected to a test MongoDB instance.","1. Manually stop the MongoDB service. 2. Observe the application logs. 3. Restart the MongoDB service. 4. Observe the application logs again.","When the DB is stopped, the application logs a 'disconnected' event but does not crash. When the DB is restarted, the application logs a 'reconnected' event and resumes normal operation.","Test MongoDB instance that can be stopped/started.","Node.js, MongoDB",4,TASK-IAP-004-02
IAP-T-008,Database Model,Security,Integration,Critical,High,"Verify compound unique index prevents replay attacks at the database level","An integration test environment with a clean MongoDB instance is available.","1. Using the `IapTransactionModel`, create and save a transaction with `platform: 'ios'` and `platformTransactionId: 'replay_test_123'`. 2. Attempt to create and save a second transaction with the exact same `platform` and `platformTransactionId`.","The first save operation succeeds. The second save operation fails, throwing a unique constraint violation error (MongoDB error code 11000).","N/A","Jest, mongodb-memory-server",2,TASK-IAP-010-01
IAP-T-009,Database Model,Functional,Integration,High,High,"Verify compound unique index allows different platforms with the same transaction ID","An integration test environment with a clean MongoDB instance is available.","1. Using the `IapTransactionModel`, create and save a transaction with `platform: 'ios'` and `platformTransactionId: 'cross_platform_test_456'`. 2. Attempt to create and save a second transaction with `platform: 'android'` and the same `platformTransactionId: 'cross_platform_test_456'`.","Both save operations succeed without error. Two separate documents are created in the database.","N/A","Jest, mongodb-memory-server",2,TASK-IAP-010-01
IAP-T-010,Repository,Functional,Unit,High,High,"Unit test IapTransactionRepository `findByPlatformTransactionId` method","The `IapTransactionModel` is mocked.","1. Instantiate `IapTransactionRepository` with the mocked model. 2. Call `repository.findByPlatformTransactionId('ios', 'tx1')`. 3. Assert that `IapTransactionModel.findOne` was called with the query `{ platform: 'ios', platformTransactionId: 'tx1' }`.","The mock of `IapTransactionModel.findOne` is called exactly once with the correct query object.","N/A","Jest, Mongoose",1.5,TASK-IAP-011-01
IAP-T-011,Repository,Functional,Unit,High,High,"Unit test IapTransactionRepository `create` method","The `IapTransactionModel` is mocked. The `save` method on the model instance is also mocked.","1. Instantiate `IapTransactionRepository`. 2. Call `repository.create({ ...transactionData })`. 3. Assert that a new instance of `IapTransactionModel` was created with the provided data. 4. Assert that the `save` method was called on the new instance.","A new model instance is created and its `save` method is called once. The created object is returned.","Sample transaction data object.","Jest, Mongoose",1.5,TASK-IAP-011-01
IAP-T-012,Repository,Functional,Unit,Critical,High,"Unit test PlayerInventoryRepository `grantItemsToPlayer` for atomic increment","The `PlayerInventoryModel` (or equivalent) is mocked.","1. Instantiate `PlayerInventoryRepository`. 2. Call `repository.grantItemsToPlayer(userId, [{ keyName: 'coins', quantity: 100 }])`. 3. Assert that `findOneAndUpdate` was called with the correct `userId` and `keyName`. 4. Assert that the update operator was `{ $inc: { quantity: 100 } }`. 5. Assert that the `upsert: true` option was included.","The mock of `findOneAndUpdate` is called with the correct query, an update object containing the `$inc` operator, and the `upsert: true` option.","User ID string, array of items to grant.","Jest, Mongoose",2,TASK-IAP-012-01
IAP-T-013,Service,Functional,Unit,High,High,"Unit test AuditLogService `logEvent` method","The `AuditLogModel` is mocked.","1. Instantiate `AuditLogService` with the mocked model. 2. Call `service.logEvent('test_event', { detail: 'value' }, 'user123')`. 3. Assert that the static `create` method on `AuditLogModel` was called. 4. Assert that the payload passed to `create` contains the correct `eventType`, `details`, and `userId`.","`AuditLogModel.create` is called once with an object matching the parameters passed to `logEvent`.","N/A","Jest, Mongoose",1.5,TASK-IAP-013-03
IAP-T-014,Gateway,Functional,Unit,Critical,High,"Unit test AppleIapGateway for a successful validation","The `apple-receipt-verify` library is mocked to simulate a successful response.","1. Configure the mock to return a successful Apple response (status 0, valid `in_app` array). 2. Instantiate and call `AppleIapGateway.validate('valid_receipt_string')`. 3. Assert the result.","The method returns `{ isValid: true, transactionId: '...', sku: '...' }` with the data correctly parsed from the mocked response.","A mock Apple success response object.","Jest",2,TASK-IAP-021-02
IAP-T-015,Gateway,Functional,Unit,Critical,High,"Unit test AppleIapGateway for a failed validation (invalid receipt)","The `apple-receipt-verify` library is mocked to simulate a failure response.","1. Configure the mock to return a failure response from Apple (e.g., status 21002). 2. Instantiate and call `AppleIapGateway.validate('invalid_receipt_string')`. 3. Assert the result.","The method returns `{ isValid: false, ... }` and includes the raw response for debugging.","A mock Apple failure response object.","Jest",2,TASK-IAP-021-02
IAP-T-016,Gateway,Functional,Unit,Critical,High,"Unit test GoogleIapGateway for a successful validation","The `google-play-billing` library is mocked to simulate a successful response.","1. Configure the mock to return a successful Google response (`purchaseState: 0`, valid `orderId`). 2. Instantiate and call `GoogleIapGateway.validate({ token: 'valid_token', sku: 'sku1' })`. 3. Assert the result.","The method returns `{ isValid: true, transactionId: '...', sku: '...' }` with the `orderId` correctly parsed as the transactionId.","A mock Google success response object.","Jest",2,TASK-IAP-022-02
IAP-T-017,Gateway,Functional,Unit,Critical,High,"Unit test GoogleIapGateway for a failed validation (consumed purchase)","The `google-play-billing` library is mocked to simulate a failure response.","1. Configure the mock to return a response with `purchaseState: 1` (Canceled) or `purchaseState: 2` (Pending). 2. Instantiate and call `GoogleIapGateway.validate({ token: 'consumed_token', sku: 'sku1' })`. 3. Assert the result.","The method returns `{ isValid: false, ... }` and includes the raw response for debugging.","A mock Google failure response object.","Jest",2,TASK-IAP-022-02
IAP-T-018,Gateway,Functional,Unit,High,High,"Unit test PlatformGatewayFactory returns correct gateway","The `AppleIapGateway` and `GoogleIapGateway` classes are mocked.","1. Instantiate `PlatformGatewayFactory` with the mocked gateways. 2. Call `factory.getGateway('ios')`. 3. Assert that the returned object is an instance of the mocked `AppleIapGateway`. 4. Call `factory.getGateway('android')`. 5. Assert that the returned object is an instance of the mocked `GoogleIapGateway`.","Each call to `getGateway` returns an instance of the correct mocked class based on the input platform string.","N/A","Jest",1,TASK-IAP-050-03
IAP-T-019,Service,Functional,Unit,Critical,High,"Unit test IapValidationService happy path","All dependencies (`PlatformGatewayFactory`, repositories, `AuditLogService`) are mocked. The gateway mock is configured to return a valid response. The `findByPlatformTransactionId` mock is configured to return null.","1. Call `IapValidationService.validatePurchase` with valid user and DTO data. 2. Assert that the mock methods for `gateway.validate`, `iapRepo.findByPlatformTransactionId`, `iapRepo.create`, `inventoryRepo.grantItemsToPlayer`, `iapRepo.update`, and `auditService.logEvent` are called in the correct sequence.","All mocked dependencies are called in the expected order. The final `iapRepo.update` call sets the status to 'validated'. The service returns `{ success: true, ... }`.","Valid `userId` and `ValidateIapRequestDto`.","Jest",4,TASK-IAP-050-02
IAP-T-020,Service,Security,Unit,Critical,High,"Unit test IapValidationService replay attack rejection","All dependencies are mocked. The gateway mock is configured to return a valid response. The `findByPlatformTransactionId` mock is configured to return an existing transaction document.","1. Call `IapValidationService.validatePurchase`. 2. Assert that `gateway.validate` and `iapRepo.findByPlatformTransactionId` are called. 3. Assert that `inventoryRepo.grantItemsToPlayer` and `iapRepo.create`/`update` are NOT called. 4. Assert that `auditService.logEvent` is called with a 'replay_attempt' event type.","The service returns `{ success: false, ... }` immediately after finding the existing transaction. No item-granting or transaction-creation methods are called. A security audit event is logged.","Valid `userId` and `ValidateIapRequestDto`.","Jest",3,TASK-IAP-050-02
IAP-T-021,Service,Resilience,Unit,Critical,High,"Unit test IapValidationService fulfillment failure handling","All dependencies are mocked. The gateway and `findByPlatformTransactionId` mocks are configured for a new, valid transaction. The `PlayerInventoryRepository.grantItemsToPlayer` mock is configured to throw an error.","1. Call `IapValidationService.validatePurchase`. 2. Assert that the logic enters the `try...catch` block. 3. Assert that `iapRepo.update` is called to set the transaction status to 'failed'. 4. Assert that `auditService.logEvent` is called with a failure event type.","The service returns `{ success: false, ... }`. The transaction record, after being created as 'pending', is updated to 'failed'. A failure audit event is logged.","Valid `userId` and `ValidateIapRequestDto`.","Jest",3,TASK-IAP-050-02
IAP-T-022,API Contract,Functional,Unit,Critical,High,"Unit test Joi validator for a valid iOS request","The Joi schema from `validateIap.validator.ts` is imported.","1. Create a valid request body object for an iOS purchase (`platform: 'ios'`, `receiptData: 'some_string'`). 2. Call `schema.validate(body)`. 3. Assert that the validation result has no error.","The `validate` method returns an object where `error` is undefined.","Valid iOS request body object.","Jest, Joi",1,TASK-IAP-041-02
IAP-T-023,API Contract,Functional,Unit,Critical,High,"Unit test Joi validator for a valid Android request","The Joi schema is imported.","1. Create a valid request body object for an Android purchase (`platform: 'android'`, `receiptData: { token: '...', sku: '...' }`). 2. Call `schema.validate(body)`. 3. Assert that the validation result has no error.","The `validate` method returns an object where `error` is undefined.","Valid Android request body object.","Jest, Joi",1,TASK-IAP-041-02
IAP-T-024,API Contract,Functional,Unit,Critical,High,"Unit test Joi validator for an invalid request (mismatched data)","The Joi schema is imported.","1. Create an invalid request body object (`platform: 'ios'`, `receiptData: { token: '...' }`). 2. Call `schema.validate(body)`. 3. Assert that the validation result contains an error object.","The `validate` method returns an object where `error` is defined and contains a descriptive message about the type mismatch.","Invalid request body with mismatched platform and receiptData.","Jest, Joi",1,TASK-IAP-041-02
IAP-T-025,API Endpoint,Functional,Unit,Critical,High,"Unit test IapController successful validation call","`IapValidationService` is mocked to return `{ success: true }`. Express `req`, `res`, and `next` objects are mocked.","1. Instantiate `IapController` with the mocked service. 2. Call `controller.validate(req, res, next)`. 3. Assert that `IapValidationService.validatePurchase` was called with the correct `userId` and `body` from the `req` mock. 4. Assert that `res.status` was called with 200 and `res.json` was called with the success response.","The mocked service's `validatePurchase` method is called correctly. The mocked `res` object's `status` and `json` methods are called with 200 and the success payload, respectively.","Mocked Express request and response objects.","Jest, Express.js",2,TASK-IAP-043-03
IAP-T-026,API Endpoint,Functional,Unit,Critical,High,"Unit test IapController failed validation call","`IapValidationService` is mocked to return `{ success: false, message: '...' }`. Express `req`, `res`, and `next` objects are mocked.","1. Instantiate `IapController` with the mocked service. 2. Call `controller.validate(req, res, next)`. 3. Assert that `res.status` was called with 400 and `res.json` was called with the failure response.","The mocked `res` object's `status` and `json` methods are called with 400 and the failure payload, respectively.","Mocked Express request and response objects.","Jest, Express.js",2,TASK-IAP-043-03
IAP-T-027,End-to-End,Functional,E2E,Critical,High,"E2E test API endpoint for a successful request","The full Express application is instantiated. All external services (gateways, DB) are mocked at the service/repository layer using Jest. Auth middleware is mocked to provide a `userId`.","1. Use `supertest` to send a `POST` request to `/api/iap/validate` with a valid request body. 2. Assert the HTTP response status and body.","The API returns an HTTP 200 OK status. The response body is a JSON object with `{ success: true, ... }`.","Valid `ValidateIapRequestDto` payload.","Jest, Supertest, Express.js",3,TASK-IAP-051-04
IAP-T-028,End-to-End,Functional,E2E,Critical,High,"E2E test API endpoint for a request with invalid body","The full Express application is instantiated.","1. Use `supertest` to send a `POST` request to `/api/iap/validate` with a malformed request body (e.g., missing `platform` field). 2. Assert the HTTP response status and body.","The API returns an HTTP 400 Bad Request status. The response body contains a JSON object with a descriptive validation error message.","Malformed request body payload.","Jest, Supertest, Express.js",2,TASK-IAP-051-04
IAP-T-029,End-to-End,Security,E2E,Critical,High,"E2E test API endpoint for a request without authentication","The full Express application is instantiated.","1. Use `supertest` to send a `POST` request to `/api/iap/validate` with a valid body but without providing an authentication token. 2. Assert the HTTP response status.","The API returns an HTTP 401 Unauthorized status.","Valid request body payload.","Jest, Supertest, Express.js",2,TASK-IAP-051-04
IAP-T-030,Integration,Functional,Integration,Critical,High,"Integration test the full success flow from service to database","A test DB is running. Platform gateways are mocked to return a successful validation.","1. Call `IapValidationService.validatePurchase` for a new transaction. 2. Directly query the test database. 3. Assert that a new document exists in `iaptransactions` with status 'validated'. 4. Assert that the player's inventory in the `playerinventories` collection has been correctly updated.","A transaction record is created and marked as 'validated'. The player's inventory shows the granted items.","N/A","Jest, mongodb-memory-server",4,TASK-IAP-051-02
IAP-T-031,Integration,Security,Integration,Critical,High,"Integration test the replay attack flow from service to database","A test DB is running and seeded with a 'validated' transaction. Gateways are mocked for success.","1. Call `IapValidationService.validatePurchase` using the same transaction details as the seeded transaction. 2. Directly query the test database. 3. Assert that no new transaction record was created. 4. Assert that the player's inventory was not changed. 5. Assert that a 'replay_attempt' audit log was created.","The database state (transactions and inventory) remains unchanged from the precondition. The service returns a failure response.","A pre-existing transaction document in the test DB.","Jest, mongodb-memory-server",4,TASK-IAP-051-02
IAP-T-032,Integration,Resilience,Integration,Critical,High,"Integration test the fulfillment failure flow from service to database","A test DB is running. Gateways are mocked for success. The `PlayerInventoryRepository` is partially mocked to throw an error on `grantItemsToPlayer`.","1. Call `IapValidationService.validatePurchase`. 2. Directly query the `iaptransactions` collection in the test DB for the transaction. 3. Assert that the document exists but its `validationStatus` is 'failed'. 4. Assert the player's inventory was not changed.","A new transaction record is created in the database with its final status as 'failed'.","N/A","Jest, mongodb-memory-server",4,TASK-IAP-051-03
IAP-T-033,Deployment,Functional,System,Critical,Manual Only,"Verify Docker image builds successfully","The `Dockerfile` and `.dockerignore` files are present in the project root. Docker is installed.","1. Open a terminal in the project root. 2. Run `docker build -t glyph-iap-test .`.","The `docker build` command completes successfully without errors, creating a new image tagged `glyph-iap-test`.","N/A","Docker",1,TASK-IAP-052-01
IAP-T-034,Deployment,Functional,System,Critical,Manual Only,"Verify Docker container runs and exposes the application","A Docker image of the application has been built successfully.","1. Run the container using `docker run -p 3000:3000 --env-file ./.env.test glyph-iap-test`. 2. Observe the container logs. 3. Attempt to access a health-check endpoint (if available) or observe logs for server startup message.","The container starts without crashing. The logs show the Express server is running and listening on the configured port inside the container.","Test environment file (`.env.test`).","Docker",1.5,TASK-IAP-052-01
IAP-T-035,Deployment,Security,System,High,High,"Scan Docker image for known vulnerabilities","A Docker image of the application has been built successfully.","1. Integrate a scanner like Snyk, Trivy, or Docker Scout into the CI/CD pipeline. 2. Configure the pipeline to run the scan against the final production-stage image after it's built. 3. Fail the build if critical vulnerabilities are found.","The scanner completes its analysis. The build passes if no high or critical severity vulnerabilities are found in the OS packages or Node.js dependencies.","N/A","Snyk/Trivy, CI/CD Platform (e.g., GitHub Actions)",4,US-016
IAP-T-036,Performance,Non-Functional,Performance,High,High,"Load test the /api/iap/validate endpoint","The service is deployed to a staging environment that mirrors production specs. A valid auth token is available. Gateways are stubbed to return immediate responses.","1. Configure a load testing tool (e.g., k6, Artillery) with a script to hit the `POST /api/iap/validate` endpoint. 2. Ramp up from 10 to 200 virtual users over 2 minutes. 3. Maintain the load for 5 minutes. 4. Monitor p95/p99 response times and error rates.","Under a load of 200 concurrent requests, the p95 response time remains below 250ms. The error rate is less than 0.1%. CPU and memory usage of the service remain within acceptable limits (<80%).","Valid auth token and request body payload.","k6/Artillery, Prometheus/Grafana",8,US-015
IAP-T-037,Security,Non-Functional,System,High,Manual Only,"Exploratory testing for unexpected payloads","The API is deployed to a staging environment.","1. Using a tool like Postman or Burp Suite, send requests with various unexpected inputs. Examples: empty body, very large receipt string, non-UTF8 characters, different content-types, JSON with nested objects where a string is expected.","The server never crashes with an unhandled exception. It always returns a predictable HTTP error response, typically a 400 Bad Request or 413 Payload Too Large. No sensitive error information (e.g., stack traces) is leaked in responses.","N/A","Postman, Burp Suite",6,US-013