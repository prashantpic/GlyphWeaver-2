/**
 * @file Custom TypeScript declaration file for Express Gateway.
 * Extends existing Express or Express Gateway types to add custom properties,
 * particularly those added by custom policies or plugins.
 */

// Import Express types to augment the Request object.
// Express Gateway typically attaches its context (egContext) to the Express Request.
import * as Express from 'express';

// Define the structure of the user object populated by jwtAuthPolicy
interface EgUserContext {
  userId: string; // Or number, depending on your user ID type
  username?: string;
  roles?: string[];
  // Add any other claims from your JWT payload that you want to access
  [key: string]: any; // Allow for arbitrary claims
}

// Augment the Express.Request interface to include egContext with custom properties
declare module 'express' {
  export interface Request {
    egContext: {
      /**
       * Unique identifier for the current request, generated by Express Gateway.
       */
      requestID?: string;

      /**
       * Information about the authenticated user, populated by `jwtAuthPolicy`.
       * Undefined if authentication fails or is not applied.
       */
      user?: EgUserContext;

      /**
       * Property that can be set by `canaryRoutingPlugin` (or a similar mechanism)
       * to indicate that the request should be routed to a specific canary service endpoint,
       * overriding the default proxy target for the current pipeline.
       */
      overrideServiceEndpoint?: string;

      /**
       * Allows other custom policies or plugins to attach their own contextual data.
       */
      [key: string]: any;
    };
  }
}

// You can also define types for custom policy action parameters if they are complex.
// This helps in type-checking the configuration passed to policies in gateway.config.yml.
// Example:
// export interface MyCustomPolicyParams {
//   someSetting: string;
//   anotherSetting?: boolean;
// }

// If Express Gateway exposes its own `Context` type that can be augmented,
// that would be an alternative to augmenting `Express.Request`.
// However, augmenting `Express.Request` to extend `egContext` is a common pattern.
// Example (if EG had a directly augmentable Context):
// declare module 'express-gateway' { // Replace 'express-gateway' with actual module if typings exist
//   interface Context { // Assuming 'Context' is the name of EG's context object
//     user?: EgUserContext;
//     overrideServiceEndpoint?: string;
//   }
// }

// This file ensures that when you access `req.egContext.user` or other custom
// properties in your TypeScript code (policies, plugins), the TypeScript compiler
// understands their types and provides autocompletion and type checking.
// Make sure this file is included in your tsconfig.json's "typeRoots" or "include" paths.