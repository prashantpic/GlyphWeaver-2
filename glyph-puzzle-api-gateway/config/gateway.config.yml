http:
  port: ${process.env.PORT:-3000}

admin:
  port: 9876
  host: localhost

apiEndpoints:
  apiV1:
    host: '*'
    paths: '/v1/*'
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'] # Define allowed methods
  # Example for a specific, unauthenticated health check endpoint
  # healthCheck:
  #   host: '*'
  #   paths: '/health'
  #   methods: ['GET']
  swaggerDocs:
    host: '*'
    paths: '/api-docs*' # This path will be handled by the swagger.plugin.ts

serviceEndpoints:
  backendService: # Main backend service (e.g., REPO-BACKEND-API)
    url: 'http://localhost:8000' # Fallback/default URL; Service Discovery plugin will update this
    # Configuration for circuit breaker for this specific service endpoint
    # These settings can be overridden by the circuitBreaker policy in the pipeline if needed
    # circuitBreaker:
    #   errorThresholdPercentage: ${process.env.CB_BACKEND_ERROR_THRESHOLD:-50}
    #   resetTimeout: ${process.env.CB_BACKEND_RESET_TIMEOUT_MS:-10000}

  # Example: if canary routing plugin targets a differently named service endpoint
  # backendServiceCanary:
  #   url: 'http://localhost:8001' # Canary instance fallback

policies:
  # Built-in policies are implicitly available
  - cors
  - rate-limit
  - proxy
  # Custom policies (these names must match the 'name' property in the policy files)
  - jwtAuthPolicy
  - customRequestValidationPolicy
  - requestTransformerPolicy
  - responseTransformerPolicy
  - errorHandlerPolicy
  # - canaryRoutingPolicy # If defined as a custom policy by canary.plugin.ts

pipelines:
  # Default pipeline for version 1 of the API
  v1_api_pipeline:
    apiEndpoints:
      - apiV1 # Link this pipeline to the /v1/* apiEndpoint
    policies:
      # 1. CORS: Handle Cross-Origin Resource Sharing
      - cors:
          origin: ${process.env.CORS_ALLOWED_ORIGINS:-*}
          methods: 'GET,POST,PUT,DELETE,OPTIONS'
          allowedHeaders: 'Origin,X-Requested-With,Content-Type,Accept,Authorization'
          credentials: true # Important for cookies/auth headers
          optionsSuccessStatus: 204

      # 2. Rate Limiting: Protect against abuse
      - rate-limit:
          windowMs: ${process.env.RATE_LIMIT_WINDOW_MS:-60000} # 1 minute
          max: ${process.env.RATE_LIMIT_MAX_REQUESTS:-100} # Max requests per windowMs
          message: 'Too many requests, please try again later.'
          # keyGenerator: (req) => req.ip # Default, or use req.egContext.user.userId after auth
          # driver: redis # Enable if Redis is configured in system.config.yml and desired for distributed state
          # skip: (req, res) => req.method === 'OPTIONS' # Optionally skip for OPTIONS requests

      # 3. JWT Authentication (custom policy)
      - jwtAuthPolicy:
          secretOrPublicKey: ${process.env.JWT_SECRET_OR_PUBLIC_KEY}
          # issuer: ${process.env.JWT_ISSUER} # Uncomment if issuer validation is needed
          # audience: ${process.env.JWT_AUDIENCE} # Uncomment if audience validation is needed

      # 4. Custom Request Validation (custom policy)
      - customRequestValidationPolicy: {} # Config can be passed here if policy supports it

      # 5. Request Transformation (custom policy) - Optional, apply if needed
      # - requestTransformerPolicy:
      #     # Example configuration for field mapping
      #     fieldMapping:
      #       clientFieldName: backend_field_name

      # 6. Canary Routing Logic (if canary.plugin.ts influences proxy behavior or adds its own policy)
      # This might involve the plugin modifying req.egContext.overrideServiceEndpoint
      # or placing a 'canaryRoutingPolicy' here.

      # 7. Proxy to backend service with Circuit Breaker
      - proxy:
          action:
            serviceEndpoint: backendService # Target service endpoint
            # changeOrigin: true # Useful if backend is on a different domain/port
            # preserveHostHdr: true
            # ignorePath: false
            # autoRewrite: true
            # Forward user identity if populated by jwtAuthPolicy
            # forwardHeaders:
            #   X-User-Id: '{egContext.user.userId}'
          # Circuit Breaker configuration applied to this proxy action
          circuitBreaker:
            enabled: true # Explicitly enable
            errorThresholdPercentage: ${process.env.CIRCUIT_BREAKER_ERROR_THRESHOLD:-50} # % of failures to trip
            resetTimeout: ${process.env.CIRCUIT_BREAKER_RESET_TIMEOUT_MS:-10000} # ms to wait before retrying
            # driver: redis # Enable if Redis is configured in system.config.yml for distributed state

      # 8. Response Transformation (custom policy) - Optional, apply if needed after proxy
      # - responseTransformerPolicy:
      #     # Example configuration for field mapping
      #     fieldMapping:
      #       backend_field_name: clientFieldName

      # 9. Error Handling (custom policy) - Should be last in the main flow
      # Note: Express Gateway runs error handlers in a separate phase.
      # This policy should be structured to catch errors passed via next(err).
      # If it's a standard policy, it might not catch errors from `proxy` unless `proxy` calls `next(err)`.
      # The `errorHandlerPolicy` in Express Gateway often needs to be registered in a way that
      # it becomes the default error handler for the pipeline or gateway.
      # For simplicity, placing it last ensures it's part of the chain.
      # Its effectiveness for proxy errors depends on EG's internal error propagation.
      - errorHandlerPolicy: {}

  # Example: Pipeline for Swagger Docs (usually doesn't need complex policies)
  # swagger_pipeline:
  #   apiEndpoints:
  #     - swaggerDocs
  #   policies:
  #     - cors: {} # Basic CORS if UI is served from different origin than API
      # The swagger.plugin.ts handles serving static files, so no proxy needed here.

  # Example: Pipeline for unauthenticated health check endpoint
  # health_check_pipeline:
  #   apiEndpoints:
  #     - healthCheck
  #   policies:
  #     - proxy:
  #         action:
  #           serviceEndpoint: backendService # Assuming backend has a /health endpoint
  #           # Potentially rewrite path if needed
  #           # pathRewrite:
  #           #   '^/health': '/internal/health'