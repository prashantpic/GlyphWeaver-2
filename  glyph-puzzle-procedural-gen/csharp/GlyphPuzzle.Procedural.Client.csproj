<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <LangVersion>12.0</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AssemblyName>GlyphPuzzle.Procedural.Client</AssemblyName>
    <RootNamespace>GlyphPuzzle.Procedural.Client</RootNamespace>
    <Description>Procedural level generation library for the Glyph Puzzle Unity client.</Description>
    <!--
      Ensure this project is configured as a Unity-compatible class library.
      Depending on Unity version and project setup, this might be a standard .NET Standard library,
      or it might require specific Unity properties if it's an Assembly Definition (.asmdef) based project.
      For .asmdef, Unity handles compilation. This .csproj is more for standalone development/testing or if building a DLL externally.
    -->
  </PropertyGroup>

  <ItemGroup>
    <!--
      Unity-specific references (e.g., UnityEngine.dll, Unity.Mathematics) would typically be
      handled by Unity's build system if this code is directly within a Unity project's Assets folder
      and managed by an .asmdef file.
      If building a separate DLL to be imported into Unity, you might need to reference Unity DLLs here.
      Example (uncomment and adjust path if needed, but usually not for in-Unity development):
      <Reference Include="UnityEngine">
        <HintPath>path_to_unity_editor_data/Managed/UnityEngine.dll</HintPath>
      </Reference>
    -->
  </ItemGroup>

  <ItemGroup>
    <!--
      Example for a third-party pathfinding library if managed via NuGet (less common for direct Unity integration,
      Unity Package Manager is preferred for Unity-specific packages).
      <PackageReference Include="Pathfinding.Ionic.AStar" Version="1.0.1" />
    -->
    <!--
      If using a specific seeded random number generator library via NuGet:
      <PackageReference Include="SomeSeededRandomLib" Version="1.0.0" />
    -->
  </ItemGroup>

  <!-- This file satisfies REQ-CGLE-008, REQ-CGLE-011, REQ-CGLE-013 by providing the project structure -->
  <!-- for the C# library components that implement these requirements. -->

</Project>