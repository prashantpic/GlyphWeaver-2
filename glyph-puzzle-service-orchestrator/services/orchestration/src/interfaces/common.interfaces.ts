export type PlayerID = string; // Typically a UUID or platform-specific ID
export type ItemID = string;   // Game-specific item identifier (e.g., UUID, SKU)
export type Timestamp = string; // ISO 8601 string format (e.g., "2023-10-26T10:00:00.000Z")

/**
 * Standard API response structure if your services follow a common pattern.
 */
export interface ApiResponse<T> {
  data?: T;
  error?: ErrorDetails;
  success: boolean;
  statusCode: number;
}

/**
 * Standard structure for error details in API responses or custom errors.
 */
export interface ErrorDetails {
  code: string; // Application-specific error code
  message: string;
  fields?: Record<string, string>; // For validation errors, field-specific messages
  [key: string]: any; // Allow other properties
}

/**
 * Represents an analytics event to be tracked.
 */
export interface AnalyticsEvent {
  name: string; // Event name, e.g., "LevelCompleted", "ItemPurchased"
  timestamp: Timestamp; // When the event occurred
  userId?: PlayerID; // Associated user, if any
  properties: Record<string, any>; // Custom event properties
}

/**
 * Represents a generic audit log entry.
 * REQ-SCF-014 (Secure Score Logging) implies a need for this.
 */
export interface AuditLogEntry {
  logId?: string; // Auto-generated by logging system usually
  eventType: string; // e.g., "ScoreSubmissionProcessed", "IAPValidated"
  timestamp: Timestamp; // When the event was logged by the orchestrator/service
  userId?: PlayerID; // Associated user, if applicable
  ipAddress?: string; // Associated IP address, if applicable and GDPR compliant
  details: Record<string, any>; // The core event data, can be complex
  workflowId?: string; // If related to a Temporal workflow
  activityId?: string; // If related to a specific Temporal activity
  serviceName: string; // Name of the service generating the log (e.g., "glyph-puzzle-service-orchestrator")
  outcome?: 'Success' | 'Failure' | 'Attempt'; // Outcome of the audited operation
}