import { PlayerID, ItemID, Timestamp } from './common.interfaces';

export type IAPPlatform = 'ios' | 'android' | string; // Allow other platform strings

/**
 * Input data for the IAP Processing Workflow.
 */
export interface IAPWorkflowInput {
  playerId: PlayerID;
  productId: string; // Game-specific product identifier
  transactionId: string; // Original transaction ID from the client/platform
  receiptData: string; // The raw receipt string/blob from the client
  platform: IAPPlatform;
  quantity: number; // Typically 1, but could be more for consumable packs
  priceInCents?: number; // Optional: for analytics or display
  currency?: string; // Optional: 3-letter ISO currency code, for analytics
}

/**
 * Input for the `verifyIapReceiptActivity`.
 */
export interface VerifyIapReceiptActivityInput {
  receiptData: string;
  productId: string;
  transactionId: string; // Pass through for logging and context
  platform: IAPPlatform;
}

/**
 * Result from the IAP receipt validation service/activity.
 */
export interface IAPValidationResult {
  isValid: boolean;
  platformTransactionId?: string; // The verified transaction ID from the platform's perspective
  productId?: string; // Verified product ID from the platform
  purchaseDate?: Timestamp; // Verified purchase date
  quantity?: number; // Verified quantity
  failureReason?: string; // If !isValid
  validationData?: unknown; // Any platform-specific data to pass to grant entitlement
}

/**
 * Represents an item in the player's inventory.
 */
export interface InventoryItem {
  itemId: ItemID;
  quantity: number;
  // other item metadata if needed
}

/**
 * Input for the `grantEntitlementActivity`.
 */
export interface GrantEntitlementInput {
  playerId: PlayerID;
  productId: string; // Game-specific product ID
  transactionId: string; // Original or platform-verified transaction ID
  quantity: number;
  validationData?: unknown; // Data from validation result, if needed by backend
}

/**
 * Output from the `grantEntitlementActivity`.
 */
export interface GrantEntitlementOutput {
  internalTransactionId?: string; // ID generated by our backend for this grant
  itemsGranted?: InventoryItem[];
  currencyGranted?: { currencyType: string; amount: number }[];
  message?: string;
}

/**
 * Input for the `compensateGrantEntitlementActivity`.
 */
export interface CompensateGrantEntitlementInput {
  playerId: PlayerID;
  transactionId: string; // The transaction ID associated with the grant to be reverted
  productId: string; // Product ID for context
  reason: string;
}

/**
 * Input for the `updatePlayerInventoryActivity`.
 * This might be redundant if grantEntitlement fully handles inventory.
 * If used, it confirms or makes final adjustments.
 */
export interface UpdatePlayerInventoryInput {
  playerId: PlayerID;
  transactionId: string;
  itemsGranted?: InventoryItem[];
  currencyGranted?: { currencyType: string; amount: number }[];
  // other relevant data
}
export interface UpdatePlayerInventoryOutput {
    success: boolean;
    message?: string;
}


/**
 * Input for the `trackIapEventActivity`.
 */
export interface TrackIAPEventInput {
  playerId: PlayerID;
  transactionId: string;
  eventName: 'IAPSuccess' | 'IAPFailure' | string; // Specific event names
  eventData: Record<string, any>; // Flexible data payload
}

/**
 * Generic response for compensation actions (if they return data).
 * Often, compensations might just return void or throw errors.
 */
export interface CompensationResponse {
  success: boolean;
  message?: string;
}