import { Player } from '../../domain/player.model';

/**
 * @file Defines the contract for the Player Repository, abstracting data access logic.
 */

/**
 * Interface for all data operations related to player accounts.
 * This decouples the application's business logic from the specific database implementation.
 */
export interface IPlayerRepository {
  /**
   * Finds a player by their email address.
   * @param email - The email of the player to find.
   * @returns A promise that resolves to the Player object or null if not found.
   */
  findByEmail(email: string): Promise<Player | null>;
  
  /**
   * Finds a player by their unique ID.
   * @param id - The unique ID of the player to find.
   * @returns A promise that resolves to the Player object or null if not found.
   */
  findById(id: string): Promise<Player | null>;

  /**
   * Creates a new player in the data store.
   * @param playerData - The data for the new player, excluding fields generated by the database.
   * @returns A promise that resolves to the newly created Player object.
   */
  create(playerData: Omit<Player, 'id' | 'createdAt' | 'updatedAt' | 'platformLinks'>): Promise<Player>;
  
  /**
   * Updates a player's record to link a new platform-specific account.
   * @param userId - The ID of the player to update.
   * @param platform - The name of the platform (e.g., 'google-play').
   * @param platformId - The user's ID on that platform.
   * @returns A promise that resolves to the updated Player object.
   * @throws May throw an error if the platformId is already linked to another account.
   */
  updatePlatformLink(userId: string, platform: string, platformId: string): Promise<Player>;
}